# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/user/foreign/uavcanv1-influxdb-writer/custom_data_types/housebus/electricity/meter.1.0.uavcan
#
# Generated at:  2021-11-11 23:08:20.452849 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     housebus.electricity.meter
# Version:       1.0
#
# pylint: skip-file

from __future__ import annotations
import numpy as _np_
import typing as _ty_
import pydsdl as _pydsdl_
import pyuavcan.dsdl as _dsdl_


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class meter_1_0(_dsdl_.CompositeObject):
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 total_energy_mwh: _ty_.Optional[_ty_.Union[int, _np_.uint64]] = None,
                 power_mw:         _ty_.Optional[_ty_.Union[int, _np_.int64]] = None,
                 power_l1_mw:      _ty_.Optional[_ty_.Union[int, _np_.int64]] = None,
                 power_l2_mw:      _ty_.Optional[_ty_.Union[int, _np_.int64]] = None,
                 power_l3_mw:      _ty_.Optional[_ty_.Union[int, _np_.int64]] = None) -> None:
        """
        housebus.electricity.meter.1.0
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param total_energy_mwh: saturated uint64 total_energy_mwh
        :param power_mw:         saturated int40 power_mw
        :param power_l1_mw:      saturated int40 power_l1_mw
        :param power_l2_mw:      saturated int40 power_l2_mw
        :param power_l3_mw:      saturated int40 power_l3_mw
        """
        self._total_energy_mwh: int
        self._power_mw:         int
        self._power_l1_mw:      int
        self._power_l2_mw:      int
        self._power_l3_mw:      int

        self.total_energy_mwh = total_energy_mwh if total_energy_mwh is not None else 0

        self.power_mw = power_mw if power_mw is not None else 0

        self.power_l1_mw = power_l1_mw if power_l1_mw is not None else 0

        self.power_l2_mw = power_l2_mw if power_l2_mw is not None else 0

        self.power_l3_mw = power_l3_mw if power_l3_mw is not None else 0

    @property
    def total_energy_mwh(self) -> int:
        """
        saturated uint64 total_energy_mwh
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._total_energy_mwh

    @total_energy_mwh.setter
    def total_energy_mwh(self, x: _ty_.Union[int, _np_.uint64]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 18446744073709551615:
            self._total_energy_mwh = x
        else:
            raise ValueError(f'total_energy_mwh: value {x} is not in [0, 18446744073709551615]')

    @property
    def power_mw(self) -> int:
        """
        saturated int40 power_mw
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._power_mw

    @power_mw.setter
    def power_mw(self, x: _ty_.Union[int, _np_.int64]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -549755813888 <= x <= 549755813887:
            self._power_mw = x
        else:
            raise ValueError(f'power_mw: value {x} is not in [-549755813888, 549755813887]')

    @property
    def power_l1_mw(self) -> int:
        """
        saturated int40 power_l1_mw
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._power_l1_mw

    @power_l1_mw.setter
    def power_l1_mw(self, x: _ty_.Union[int, _np_.int64]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -549755813888 <= x <= 549755813887:
            self._power_l1_mw = x
        else:
            raise ValueError(f'power_l1_mw: value {x} is not in [-549755813888, 549755813887]')

    @property
    def power_l2_mw(self) -> int:
        """
        saturated int40 power_l2_mw
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._power_l2_mw

    @power_l2_mw.setter
    def power_l2_mw(self, x: _ty_.Union[int, _np_.int64]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -549755813888 <= x <= 549755813887:
            self._power_l2_mw = x
        else:
            raise ValueError(f'power_l2_mw: value {x} is not in [-549755813888, 549755813887]')

    @property
    def power_l3_mw(self) -> int:
        """
        saturated int40 power_l3_mw
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._power_l3_mw

    @power_l3_mw.setter
    def power_l3_mw(self, x: _ty_.Union[int, _np_.int64]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -549755813888 <= x <= 549755813887:
            self._power_l3_mw = x
        else:
            raise ValueError(f'power_l3_mw: value {x} is not in [-549755813888, 549755813887]')

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: meter_1_0._SerializerTypeVar_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.add_aligned_u64(max(min(self.total_energy_mwh, 18446744073709551615), 0))
        _ser_.add_aligned_signed(max(min(self.power_mw, 549755813887), -549755813888), 40)
        _ser_.add_aligned_signed(max(min(self.power_l1_mw, 549755813887), -549755813888), 40)
        _ser_.add_aligned_signed(max(min(self.power_l2_mw, 549755813887), -549755813888), 40)
        _ser_.add_aligned_signed(max(min(self.power_l3_mw, 549755813887), -549755813888), 40)
        _ser_.pad_to_alignment(8)
        assert 224 <= (_ser_.current_bit_length - _base_offset_) <= 224, \
            'Bad serialization of housebus.electricity.meter.1.0'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: meter_1_0._DeserializerTypeVar_) -> meter_1_0:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "total_energy_mwh"
        _f0_ = _des_.fetch_aligned_u64()
        # Temporary _f1_ holds the value of "power_mw"
        _f1_ = _des_.fetch_aligned_signed(40)
        # Temporary _f2_ holds the value of "power_l1_mw"
        _f2_ = _des_.fetch_aligned_signed(40)
        # Temporary _f3_ holds the value of "power_l2_mw"
        _f3_ = _des_.fetch_aligned_signed(40)
        # Temporary _f4_ holds the value of "power_l3_mw"
        _f4_ = _des_.fetch_aligned_signed(40)
        self = meter_1_0(
            total_energy_mwh=_f0_,
            power_mw=_f1_,
            power_l1_mw=_f2_,
            power_l2_mw=_f3_,
            power_l3_mw=_f4_)
        _des_.pad_to_alignment(8)
        assert 224 <= (_des_.consumed_bit_length - _base_offset_) <= 224, \
            'Bad deserialization of housebus.electricity.meter.1.0'
        assert isinstance(self, meter_1_0)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'total_energy_mwh=%s' % self.total_energy_mwh,
            'power_mw=%s' % self.power_mw,
            'power_l1_mw=%s' % self.power_l1_mw,
            'power_l2_mw=%s' % self.power_l2_mw,
            'power_l3_mw=%s' % self.power_l3_mw,
        ])
        return f'housebus.electricity.meter.1.0({_o_0_})'

    _EXTENT_BYTES_ = 40

    _MODEL_: _pydsdl_.DelimitedType = _dsdl_.CompositeObject._restore_constant_(
        'ABzY8WTK5>0{^{L-)|d55Oze{n52b9q2ZTAgDAxa^^Q;;=mRJ;1%WOxB>^NP(6V<o@vOMpJ?-u}F%pP~rfQ^>u+-&&|D=CT{}g6@'
        'P2$A%OCPXgd2VOE?`CGd8UK0VpMU3DqmR2@4RVtg5i_6#FT`&=Eg)i<Dl27#1@ErhgF=*K=HCq}@Q?lb2mW{8ahI5o612ybyRu_-'
        'o!MH$*^rA&@{%atKvf$^YZE~Mnbjf_b`X_d3GUjg584PN1JnEu&+NxOnM+y^{egFjj9bE_wFTpUCfXS}pG0|g@k;?kewxSv%em#u'
        'hU{j+D;=s7eTrEAUK-Jpkbf;L^gy4jYLTVFvI1n!qEFU|Jmbc)Qsv<Bb+>Z=m?*%a4f1UT7gf|c^xNLO!i?oI=Q<xJdQ_*l;I3L_'
        'dBK1h+Z(WQ552p<a+P`4@)U5bNdaG@_blzqOcCEoI(Qx5!5c>-)^?@#KogzEoA}-to)4xY78^vd_B^1Eo(FXM6a;R0?8;d>Xk-+?'
        '@8SwZ*umQv<0tqreu{T$x{w?y4H+km`Xl!e+ZFqevr1{pMDDw8i5XSv49HOct2njWWihG}V$!9Kca;WeW?b`r#$|u)mXNzey`QJI'
        '_B07!$60NxDo;gZ;$ua}V~UPPijLNz52J>Ol*Eu5dZPwugWmcg1Ai3Cq<c*Z<K4|;HJ)mL0`2){?=IgJc60Q+Lyym{+P%P3<=yHm'
        '5;G`MRS440@)neev~Fp-zNtWStMvFVXDDc5aMQhfpXa%dy@??F7P}|brn|PGWN5jZO6gu~7^(0uvt!7eDQrKEEd1&JjHF7tby09V'
        'n8^JS>+_-p|F`cX>qC>$j;flb&{nEby1G)xF#2Th{b0<8@vjRW&<hOqD=tTCtV<gIqe<i-uyu$HOo|T@#6$W%B*&u=^j9FBJf4mn'
        'QqXV`d+vBT_6Y?&nZ%wuo{oJ=K~KlA?RxUqq+zac5ijFaTngP^p@EHQSnmLSHfxA+{Rltr;$7Upd(C{zQyWQL)^DxPxfL4m=3huN'
        '1fJ8+Xqn@iCtGEew#wVdTv)MqBW%+z@T;bZWQHoni(I85&&d1LZ7zGT4HZ~1Yi53Ju0H_Ax!S`~4;~~fJf!49XOebsw1#HXqNbax'
        '<o#ueH-Mx60QmDYRip<100'
    )
    assert isinstance(_MODEL_, _pydsdl_.DelimitedType)
