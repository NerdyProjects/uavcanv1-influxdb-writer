# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/user/foreign/uavcanv1-influxdb-writer/custom_data_types/housebus/heating/heating_status.1.0.uavcan
#
# Generated at:  2021-11-11 23:08:20.573038 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     housebus.heating.heating_status
# Version:       1.0
#
# pylint: skip-file

from __future__ import annotations
import numpy as _np_
import typing as _ty_
import pydsdl as _pydsdl_
import pyuavcan.dsdl as _dsdl_


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class heating_status_1_0(_dsdl_.CompositeObject):
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 valve_position_dhw:     _ty_.Optional[_ty_.Union[int, _np_.uint8]] = None,
                 defrost_running:        _ty_.Optional[_ty_.Union[int, _np_.uint8]] = None,
                 external_heater:        _ty_.Optional[_ty_.Union[int, _np_.uint8]] = None,
                 internal_heater:        _ty_.Optional[_ty_.Union[int, _np_.uint8]] = None,
                 error_type_h:           _ty_.Optional[_ty_.Union[int, _np_.uint8]] = None,
                 error_number:           _ty_.Optional[_ty_.Union[int, _np_.uint8]] = None,
                 zone1_actual_temp:      _ty_.Optional[_ty_.Union[int, _np_.int8]] = None,
                 dhw_actual_temp:        _ty_.Optional[_ty_.Union[int, _np_.int8]] = None,
                 outdoor_temp:           _ty_.Optional[_ty_.Union[int, _np_.int8]] = None,
                 return_temp:            _ty_.Optional[_ty_.Union[int, _np_.int8]] = None,
                 flow_temp:              _ty_.Optional[_ty_.Union[int, _np_.int8]] = None,
                 zone1_flow_temp:        _ty_.Optional[_ty_.Union[int, _np_.int8]] = None,
                 zone1_flow_target_temp: _ty_.Optional[_ty_.Union[int, _np_.int8]] = None,
                 heat_shift_target_temp: _ty_.Optional[_ty_.Union[int, _np_.int8]] = None,
                 flow_target_temp:       _ty_.Optional[_ty_.Union[int, _np_.int8]] = None,
                 discharge_temp:         _ty_.Optional[_ty_.Union[int, _np_.int8]] = None,
                 room_thermostat_temp:   _ty_.Optional[_ty_.Union[int, _np_.int8]] = None,
                 indoor_pipe_temp:       _ty_.Optional[_ty_.Union[int, _np_.int8]] = None,
                 outdoor_pipe_temp:      _ty_.Optional[_ty_.Union[int, _np_.int8]] = None,
                 defrost_temp:           _ty_.Optional[_ty_.Union[int, _np_.int8]] = None,
                 eva_outlet_temp:        _ty_.Optional[_ty_.Union[int, _np_.int8]] = None,
                 bypass_outlet_temp:     _ty_.Optional[_ty_.Union[int, _np_.int8]] = None,
                 ipm_temp:               _ty_.Optional[_ty_.Union[int, _np_.int8]] = None,
                 high_pressure:          _ty_.Optional[_ty_.Union[int, _np_.int8]] = None,
                 low_pressure:           _ty_.Optional[_ty_.Union[int, _np_.int8]] = None,
                 compressor_current:     _ty_.Optional[_ty_.Union[int, float, _np_.float32]] = None,
                 compressor_frequency:   _ty_.Optional[_ty_.Union[int, _np_.uint8]] = None,
                 pump_flow:              _ty_.Optional[_ty_.Union[int, float, _np_.float32]] = None,
                 pump_speed:             _ty_.Optional[_ty_.Union[int, _np_.uint16]] = None,
                 pump_duty:              _ty_.Optional[_ty_.Union[int, _np_.uint8]] = None,
                 fan1_rpm:               _ty_.Optional[_ty_.Union[int, _np_.uint16]] = None,
                 fan2_rpm:               _ty_.Optional[_ty_.Union[int, _np_.uint16]] = None,
                 compressor_starts:      _ty_.Optional[_ty_.Union[int, _np_.uint16]] = None,
                 compressor_hours:       _ty_.Optional[_ty_.Union[int, _np_.uint16]] = None,
                 heat_hours:             _ty_.Optional[_ty_.Union[int, _np_.uint16]] = None,
                 dhw_hours:              _ty_.Optional[_ty_.Union[int, _np_.uint16]] = None) -> None:
        """
        housebus.heating.heating_status.1.0
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param valve_position_dhw:     saturated uint1 valve_position_dhw
        :param defrost_running:        saturated uint1 defrost_running
        :param external_heater:        saturated uint1 external_heater
        :param internal_heater:        saturated uint1 internal_heater
        :param error_type_h:           saturated uint1 error_type_h
        :param error_number:           saturated uint8 error_number
        :param zone1_actual_temp:      saturated int8 zone1_actual_temp
        :param dhw_actual_temp:        saturated int8 dhw_actual_temp
        :param outdoor_temp:           saturated int8 outdoor_temp
        :param return_temp:            saturated int8 return_temp
        :param flow_temp:              saturated int8 flow_temp
        :param zone1_flow_temp:        saturated int8 zone1_flow_temp
        :param zone1_flow_target_temp: saturated int8 zone1_flow_target_temp
        :param heat_shift_target_temp: saturated int8 heat_shift_target_temp
        :param flow_target_temp:       saturated int8 flow_target_temp
        :param discharge_temp:         saturated int8 discharge_temp
        :param room_thermostat_temp:   saturated int8 room_thermostat_temp
        :param indoor_pipe_temp:       saturated int8 indoor_pipe_temp
        :param outdoor_pipe_temp:      saturated int8 outdoor_pipe_temp
        :param defrost_temp:           saturated int8 defrost_temp
        :param eva_outlet_temp:        saturated int8 eva_outlet_temp
        :param bypass_outlet_temp:     saturated int8 bypass_outlet_temp
        :param ipm_temp:               saturated int8 ipm_temp
        :param high_pressure:          saturated int8 high_pressure
        :param low_pressure:           saturated int8 low_pressure
        :param compressor_current:     saturated float32 compressor_current
        :param compressor_frequency:   saturated uint8 compressor_frequency
        :param pump_flow:              saturated float32 pump_flow
        :param pump_speed:             saturated uint16 pump_speed
        :param pump_duty:              saturated uint8 pump_duty
        :param fan1_rpm:               saturated uint16 fan1_rpm
        :param fan2_rpm:               saturated uint16 fan2_rpm
        :param compressor_starts:      saturated uint16 compressor_starts
        :param compressor_hours:       saturated uint16 compressor_hours
        :param heat_hours:             saturated uint16 heat_hours
        :param dhw_hours:              saturated uint16 dhw_hours
        """
        self._valve_position_dhw:     int
        self._defrost_running:        int
        self._external_heater:        int
        self._internal_heater:        int
        self._error_type_h:           int
        self._error_number:           int
        self._zone1_actual_temp:      int
        self._dhw_actual_temp:        int
        self._outdoor_temp:           int
        self._return_temp:            int
        self._flow_temp:              int
        self._zone1_flow_temp:        int
        self._zone1_flow_target_temp: int
        self._heat_shift_target_temp: int
        self._flow_target_temp:       int
        self._discharge_temp:         int
        self._room_thermostat_temp:   int
        self._indoor_pipe_temp:       int
        self._outdoor_pipe_temp:      int
        self._defrost_temp:           int
        self._eva_outlet_temp:        int
        self._bypass_outlet_temp:     int
        self._ipm_temp:               int
        self._high_pressure:          int
        self._low_pressure:           int
        self._compressor_current:     float
        self._compressor_frequency:   int
        self._pump_flow:              float
        self._pump_speed:             int
        self._pump_duty:              int
        self._fan1_rpm:               int
        self._fan2_rpm:               int
        self._compressor_starts:      int
        self._compressor_hours:       int
        self._heat_hours:             int
        self._dhw_hours:              int

        self.valve_position_dhw = valve_position_dhw if valve_position_dhw is not None else 0

        self.defrost_running = defrost_running if defrost_running is not None else 0

        self.external_heater = external_heater if external_heater is not None else 0

        self.internal_heater = internal_heater if internal_heater is not None else 0

        self.error_type_h = error_type_h if error_type_h is not None else 0

        self.error_number = error_number if error_number is not None else 0

        self.zone1_actual_temp = zone1_actual_temp if zone1_actual_temp is not None else 0

        self.dhw_actual_temp = dhw_actual_temp if dhw_actual_temp is not None else 0

        self.outdoor_temp = outdoor_temp if outdoor_temp is not None else 0

        self.return_temp = return_temp if return_temp is not None else 0

        self.flow_temp = flow_temp if flow_temp is not None else 0

        self.zone1_flow_temp = zone1_flow_temp if zone1_flow_temp is not None else 0

        self.zone1_flow_target_temp = zone1_flow_target_temp if zone1_flow_target_temp is not None else 0

        self.heat_shift_target_temp = heat_shift_target_temp if heat_shift_target_temp is not None else 0

        self.flow_target_temp = flow_target_temp if flow_target_temp is not None else 0

        self.discharge_temp = discharge_temp if discharge_temp is not None else 0

        self.room_thermostat_temp = room_thermostat_temp if room_thermostat_temp is not None else 0

        self.indoor_pipe_temp = indoor_pipe_temp if indoor_pipe_temp is not None else 0

        self.outdoor_pipe_temp = outdoor_pipe_temp if outdoor_pipe_temp is not None else 0

        self.defrost_temp = defrost_temp if defrost_temp is not None else 0

        self.eva_outlet_temp = eva_outlet_temp if eva_outlet_temp is not None else 0

        self.bypass_outlet_temp = bypass_outlet_temp if bypass_outlet_temp is not None else 0

        self.ipm_temp = ipm_temp if ipm_temp is not None else 0

        self.high_pressure = high_pressure if high_pressure is not None else 0

        self.low_pressure = low_pressure if low_pressure is not None else 0

        self.compressor_current = compressor_current if compressor_current is not None else 0.0

        self.compressor_frequency = compressor_frequency if compressor_frequency is not None else 0

        self.pump_flow = pump_flow if pump_flow is not None else 0.0

        self.pump_speed = pump_speed if pump_speed is not None else 0

        self.pump_duty = pump_duty if pump_duty is not None else 0

        self.fan1_rpm = fan1_rpm if fan1_rpm is not None else 0

        self.fan2_rpm = fan2_rpm if fan2_rpm is not None else 0

        self.compressor_starts = compressor_starts if compressor_starts is not None else 0

        self.compressor_hours = compressor_hours if compressor_hours is not None else 0

        self.heat_hours = heat_hours if heat_hours is not None else 0

        self.dhw_hours = dhw_hours if dhw_hours is not None else 0

    @property
    def valve_position_dhw(self) -> int:
        """
        saturated uint1 valve_position_dhw
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._valve_position_dhw

    @valve_position_dhw.setter
    def valve_position_dhw(self, x: _ty_.Union[int, _np_.uint8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 1:
            self._valve_position_dhw = x
        else:
            raise ValueError(f'valve_position_dhw: value {x} is not in [0, 1]')

    @property
    def defrost_running(self) -> int:
        """
        saturated uint1 defrost_running
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._defrost_running

    @defrost_running.setter
    def defrost_running(self, x: _ty_.Union[int, _np_.uint8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 1:
            self._defrost_running = x
        else:
            raise ValueError(f'defrost_running: value {x} is not in [0, 1]')

    @property
    def external_heater(self) -> int:
        """
        saturated uint1 external_heater
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._external_heater

    @external_heater.setter
    def external_heater(self, x: _ty_.Union[int, _np_.uint8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 1:
            self._external_heater = x
        else:
            raise ValueError(f'external_heater: value {x} is not in [0, 1]')

    @property
    def internal_heater(self) -> int:
        """
        saturated uint1 internal_heater
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._internal_heater

    @internal_heater.setter
    def internal_heater(self, x: _ty_.Union[int, _np_.uint8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 1:
            self._internal_heater = x
        else:
            raise ValueError(f'internal_heater: value {x} is not in [0, 1]')

    @property
    def error_type_h(self) -> int:
        """
        saturated uint1 error_type_h
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._error_type_h

    @error_type_h.setter
    def error_type_h(self, x: _ty_.Union[int, _np_.uint8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 1:
            self._error_type_h = x
        else:
            raise ValueError(f'error_type_h: value {x} is not in [0, 1]')

    @property
    def error_number(self) -> int:
        """
        saturated uint8 error_number
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._error_number

    @error_number.setter
    def error_number(self, x: _ty_.Union[int, _np_.uint8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 255:
            self._error_number = x
        else:
            raise ValueError(f'error_number: value {x} is not in [0, 255]')

    @property
    def zone1_actual_temp(self) -> int:
        """
        saturated int8 zone1_actual_temp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._zone1_actual_temp

    @zone1_actual_temp.setter
    def zone1_actual_temp(self, x: _ty_.Union[int, _np_.int8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -128 <= x <= 127:
            self._zone1_actual_temp = x
        else:
            raise ValueError(f'zone1_actual_temp: value {x} is not in [-128, 127]')

    @property
    def dhw_actual_temp(self) -> int:
        """
        saturated int8 dhw_actual_temp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._dhw_actual_temp

    @dhw_actual_temp.setter
    def dhw_actual_temp(self, x: _ty_.Union[int, _np_.int8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -128 <= x <= 127:
            self._dhw_actual_temp = x
        else:
            raise ValueError(f'dhw_actual_temp: value {x} is not in [-128, 127]')

    @property
    def outdoor_temp(self) -> int:
        """
        saturated int8 outdoor_temp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._outdoor_temp

    @outdoor_temp.setter
    def outdoor_temp(self, x: _ty_.Union[int, _np_.int8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -128 <= x <= 127:
            self._outdoor_temp = x
        else:
            raise ValueError(f'outdoor_temp: value {x} is not in [-128, 127]')

    @property
    def return_temp(self) -> int:
        """
        saturated int8 return_temp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._return_temp

    @return_temp.setter
    def return_temp(self, x: _ty_.Union[int, _np_.int8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -128 <= x <= 127:
            self._return_temp = x
        else:
            raise ValueError(f'return_temp: value {x} is not in [-128, 127]')

    @property
    def flow_temp(self) -> int:
        """
        saturated int8 flow_temp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._flow_temp

    @flow_temp.setter
    def flow_temp(self, x: _ty_.Union[int, _np_.int8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -128 <= x <= 127:
            self._flow_temp = x
        else:
            raise ValueError(f'flow_temp: value {x} is not in [-128, 127]')

    @property
    def zone1_flow_temp(self) -> int:
        """
        saturated int8 zone1_flow_temp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._zone1_flow_temp

    @zone1_flow_temp.setter
    def zone1_flow_temp(self, x: _ty_.Union[int, _np_.int8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -128 <= x <= 127:
            self._zone1_flow_temp = x
        else:
            raise ValueError(f'zone1_flow_temp: value {x} is not in [-128, 127]')

    @property
    def zone1_flow_target_temp(self) -> int:
        """
        saturated int8 zone1_flow_target_temp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._zone1_flow_target_temp

    @zone1_flow_target_temp.setter
    def zone1_flow_target_temp(self, x: _ty_.Union[int, _np_.int8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -128 <= x <= 127:
            self._zone1_flow_target_temp = x
        else:
            raise ValueError(f'zone1_flow_target_temp: value {x} is not in [-128, 127]')

    @property
    def heat_shift_target_temp(self) -> int:
        """
        saturated int8 heat_shift_target_temp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._heat_shift_target_temp

    @heat_shift_target_temp.setter
    def heat_shift_target_temp(self, x: _ty_.Union[int, _np_.int8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -128 <= x <= 127:
            self._heat_shift_target_temp = x
        else:
            raise ValueError(f'heat_shift_target_temp: value {x} is not in [-128, 127]')

    @property
    def flow_target_temp(self) -> int:
        """
        saturated int8 flow_target_temp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._flow_target_temp

    @flow_target_temp.setter
    def flow_target_temp(self, x: _ty_.Union[int, _np_.int8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -128 <= x <= 127:
            self._flow_target_temp = x
        else:
            raise ValueError(f'flow_target_temp: value {x} is not in [-128, 127]')

    @property
    def discharge_temp(self) -> int:
        """
        saturated int8 discharge_temp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._discharge_temp

    @discharge_temp.setter
    def discharge_temp(self, x: _ty_.Union[int, _np_.int8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -128 <= x <= 127:
            self._discharge_temp = x
        else:
            raise ValueError(f'discharge_temp: value {x} is not in [-128, 127]')

    @property
    def room_thermostat_temp(self) -> int:
        """
        saturated int8 room_thermostat_temp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._room_thermostat_temp

    @room_thermostat_temp.setter
    def room_thermostat_temp(self, x: _ty_.Union[int, _np_.int8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -128 <= x <= 127:
            self._room_thermostat_temp = x
        else:
            raise ValueError(f'room_thermostat_temp: value {x} is not in [-128, 127]')

    @property
    def indoor_pipe_temp(self) -> int:
        """
        saturated int8 indoor_pipe_temp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._indoor_pipe_temp

    @indoor_pipe_temp.setter
    def indoor_pipe_temp(self, x: _ty_.Union[int, _np_.int8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -128 <= x <= 127:
            self._indoor_pipe_temp = x
        else:
            raise ValueError(f'indoor_pipe_temp: value {x} is not in [-128, 127]')

    @property
    def outdoor_pipe_temp(self) -> int:
        """
        saturated int8 outdoor_pipe_temp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._outdoor_pipe_temp

    @outdoor_pipe_temp.setter
    def outdoor_pipe_temp(self, x: _ty_.Union[int, _np_.int8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -128 <= x <= 127:
            self._outdoor_pipe_temp = x
        else:
            raise ValueError(f'outdoor_pipe_temp: value {x} is not in [-128, 127]')

    @property
    def defrost_temp(self) -> int:
        """
        saturated int8 defrost_temp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._defrost_temp

    @defrost_temp.setter
    def defrost_temp(self, x: _ty_.Union[int, _np_.int8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -128 <= x <= 127:
            self._defrost_temp = x
        else:
            raise ValueError(f'defrost_temp: value {x} is not in [-128, 127]')

    @property
    def eva_outlet_temp(self) -> int:
        """
        saturated int8 eva_outlet_temp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._eva_outlet_temp

    @eva_outlet_temp.setter
    def eva_outlet_temp(self, x: _ty_.Union[int, _np_.int8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -128 <= x <= 127:
            self._eva_outlet_temp = x
        else:
            raise ValueError(f'eva_outlet_temp: value {x} is not in [-128, 127]')

    @property
    def bypass_outlet_temp(self) -> int:
        """
        saturated int8 bypass_outlet_temp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._bypass_outlet_temp

    @bypass_outlet_temp.setter
    def bypass_outlet_temp(self, x: _ty_.Union[int, _np_.int8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -128 <= x <= 127:
            self._bypass_outlet_temp = x
        else:
            raise ValueError(f'bypass_outlet_temp: value {x} is not in [-128, 127]')

    @property
    def ipm_temp(self) -> int:
        """
        saturated int8 ipm_temp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._ipm_temp

    @ipm_temp.setter
    def ipm_temp(self, x: _ty_.Union[int, _np_.int8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -128 <= x <= 127:
            self._ipm_temp = x
        else:
            raise ValueError(f'ipm_temp: value {x} is not in [-128, 127]')

    @property
    def high_pressure(self) -> int:
        """
        saturated int8 high_pressure
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._high_pressure

    @high_pressure.setter
    def high_pressure(self, x: _ty_.Union[int, _np_.int8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -128 <= x <= 127:
            self._high_pressure = x
        else:
            raise ValueError(f'high_pressure: value {x} is not in [-128, 127]')

    @property
    def low_pressure(self) -> int:
        """
        saturated int8 low_pressure
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._low_pressure

    @low_pressure.setter
    def low_pressure(self, x: _ty_.Union[int, _np_.int8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if -128 <= x <= 127:
            self._low_pressure = x
        else:
            raise ValueError(f'low_pressure: value {x} is not in [-128, 127]')

    @property
    def compressor_current(self) -> float:
        """
        saturated float32 compressor_current
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._compressor_current

    @compressor_current.setter
    def compressor_current(self, x: _ty_.Union[int, float, _np_.float32]) -> None:
        """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
        x = float(x)
        in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
        if in_range or not _np_.isfinite(x):
            self._compressor_current = x
        else:
            raise ValueError(f'compressor_current: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

    @property
    def compressor_frequency(self) -> int:
        """
        saturated uint8 compressor_frequency
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._compressor_frequency

    @compressor_frequency.setter
    def compressor_frequency(self, x: _ty_.Union[int, _np_.uint8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 255:
            self._compressor_frequency = x
        else:
            raise ValueError(f'compressor_frequency: value {x} is not in [0, 255]')

    @property
    def pump_flow(self) -> float:
        """
        saturated float32 pump_flow
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._pump_flow

    @pump_flow.setter
    def pump_flow(self, x: _ty_.Union[int, float, _np_.float32]) -> None:
        """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
        x = float(x)
        in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
        if in_range or not _np_.isfinite(x):
            self._pump_flow = x
        else:
            raise ValueError(f'pump_flow: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

    @property
    def pump_speed(self) -> int:
        """
        saturated uint16 pump_speed
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._pump_speed

    @pump_speed.setter
    def pump_speed(self, x: _ty_.Union[int, _np_.uint16]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 65535:
            self._pump_speed = x
        else:
            raise ValueError(f'pump_speed: value {x} is not in [0, 65535]')

    @property
    def pump_duty(self) -> int:
        """
        saturated uint8 pump_duty
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._pump_duty

    @pump_duty.setter
    def pump_duty(self, x: _ty_.Union[int, _np_.uint8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 255:
            self._pump_duty = x
        else:
            raise ValueError(f'pump_duty: value {x} is not in [0, 255]')

    @property
    def fan1_rpm(self) -> int:
        """
        saturated uint16 fan1_rpm
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._fan1_rpm

    @fan1_rpm.setter
    def fan1_rpm(self, x: _ty_.Union[int, _np_.uint16]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 65535:
            self._fan1_rpm = x
        else:
            raise ValueError(f'fan1_rpm: value {x} is not in [0, 65535]')

    @property
    def fan2_rpm(self) -> int:
        """
        saturated uint16 fan2_rpm
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._fan2_rpm

    @fan2_rpm.setter
    def fan2_rpm(self, x: _ty_.Union[int, _np_.uint16]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 65535:
            self._fan2_rpm = x
        else:
            raise ValueError(f'fan2_rpm: value {x} is not in [0, 65535]')

    @property
    def compressor_starts(self) -> int:
        """
        saturated uint16 compressor_starts
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._compressor_starts

    @compressor_starts.setter
    def compressor_starts(self, x: _ty_.Union[int, _np_.uint16]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 65535:
            self._compressor_starts = x
        else:
            raise ValueError(f'compressor_starts: value {x} is not in [0, 65535]')

    @property
    def compressor_hours(self) -> int:
        """
        saturated uint16 compressor_hours
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._compressor_hours

    @compressor_hours.setter
    def compressor_hours(self, x: _ty_.Union[int, _np_.uint16]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 65535:
            self._compressor_hours = x
        else:
            raise ValueError(f'compressor_hours: value {x} is not in [0, 65535]')

    @property
    def heat_hours(self) -> int:
        """
        saturated uint16 heat_hours
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._heat_hours

    @heat_hours.setter
    def heat_hours(self, x: _ty_.Union[int, _np_.uint16]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 65535:
            self._heat_hours = x
        else:
            raise ValueError(f'heat_hours: value {x} is not in [0, 65535]')

    @property
    def dhw_hours(self) -> int:
        """
        saturated uint16 dhw_hours
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._dhw_hours

    @dhw_hours.setter
    def dhw_hours(self, x: _ty_.Union[int, _np_.uint16]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 65535:
            self._dhw_hours = x
        else:
            raise ValueError(f'dhw_hours: value {x} is not in [0, 65535]')

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: heating_status_1_0._SerializerTypeVar_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.add_aligned_unsigned(max(min(self.valve_position_dhw, 1), 0), 1)
        _ser_.add_unaligned_unsigned(max(min(self.defrost_running, 1), 0), 1)
        _ser_.add_unaligned_unsigned(max(min(self.external_heater, 1), 0), 1)
        _ser_.add_unaligned_unsigned(max(min(self.internal_heater, 1), 0), 1)
        _ser_.add_unaligned_unsigned(max(min(self.error_type_h, 1), 0), 1)
        _ser_.add_unaligned_unsigned(max(min(self.error_number, 255), 0), 8)
        _ser_.add_unaligned_signed(max(min(self.zone1_actual_temp, 127), -128), 8)
        _ser_.add_unaligned_signed(max(min(self.dhw_actual_temp, 127), -128), 8)
        _ser_.add_unaligned_signed(max(min(self.outdoor_temp, 127), -128), 8)
        _ser_.add_unaligned_signed(max(min(self.return_temp, 127), -128), 8)
        _ser_.add_unaligned_signed(max(min(self.flow_temp, 127), -128), 8)
        _ser_.add_unaligned_signed(max(min(self.zone1_flow_temp, 127), -128), 8)
        _ser_.add_unaligned_signed(max(min(self.zone1_flow_target_temp, 127), -128), 8)
        _ser_.add_unaligned_signed(max(min(self.heat_shift_target_temp, 127), -128), 8)
        _ser_.add_unaligned_signed(max(min(self.flow_target_temp, 127), -128), 8)
        _ser_.add_unaligned_signed(max(min(self.discharge_temp, 127), -128), 8)
        _ser_.add_unaligned_signed(max(min(self.room_thermostat_temp, 127), -128), 8)
        _ser_.add_unaligned_signed(max(min(self.indoor_pipe_temp, 127), -128), 8)
        _ser_.add_unaligned_signed(max(min(self.outdoor_pipe_temp, 127), -128), 8)
        _ser_.add_unaligned_signed(max(min(self.defrost_temp, 127), -128), 8)
        _ser_.add_unaligned_signed(max(min(self.eva_outlet_temp, 127), -128), 8)
        _ser_.add_unaligned_signed(max(min(self.bypass_outlet_temp, 127), -128), 8)
        _ser_.add_unaligned_signed(max(min(self.ipm_temp, 127), -128), 8)
        _ser_.add_unaligned_signed(max(min(self.high_pressure, 127), -128), 8)
        _ser_.add_unaligned_signed(max(min(self.low_pressure, 127), -128), 8)
        if _np_.isfinite(self.compressor_current):
            if self.compressor_current > 340282346638528859811704183484516925440.0:
                _ser_.add_unaligned_f32(340282346638528859811704183484516925440.0)
            elif self.compressor_current < -340282346638528859811704183484516925440.0:
                _ser_.add_unaligned_f32(-340282346638528859811704183484516925440.0)
            else:
                _ser_.add_unaligned_f32(self.compressor_current)
        else:
            _ser_.add_unaligned_f32(self.compressor_current)
        _ser_.add_unaligned_unsigned(max(min(self.compressor_frequency, 255), 0), 8)
        if _np_.isfinite(self.pump_flow):
            if self.pump_flow > 340282346638528859811704183484516925440.0:
                _ser_.add_unaligned_f32(340282346638528859811704183484516925440.0)
            elif self.pump_flow < -340282346638528859811704183484516925440.0:
                _ser_.add_unaligned_f32(-340282346638528859811704183484516925440.0)
            else:
                _ser_.add_unaligned_f32(self.pump_flow)
        else:
            _ser_.add_unaligned_f32(self.pump_flow)
        _ser_.add_unaligned_unsigned(max(min(self.pump_speed, 65535), 0), 16)
        _ser_.add_unaligned_unsigned(max(min(self.pump_duty, 255), 0), 8)
        _ser_.add_unaligned_unsigned(max(min(self.fan1_rpm, 65535), 0), 16)
        _ser_.add_unaligned_unsigned(max(min(self.fan2_rpm, 65535), 0), 16)
        _ser_.add_unaligned_unsigned(max(min(self.compressor_starts, 65535), 0), 16)
        _ser_.add_unaligned_unsigned(max(min(self.compressor_hours, 65535), 0), 16)
        _ser_.add_unaligned_unsigned(max(min(self.heat_hours, 65535), 0), 16)
        _ser_.add_unaligned_unsigned(max(min(self.dhw_hours, 65535), 0), 16)
        _ser_.pad_to_alignment(8)
        assert 360 <= (_ser_.current_bit_length - _base_offset_) <= 360, \
            'Bad serialization of housebus.heating.heating_status.1.0'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: heating_status_1_0._DeserializerTypeVar_) -> heating_status_1_0:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "valve_position_dhw"
        _f0_ = _des_.fetch_aligned_unsigned(1)
        # Temporary _f1_ holds the value of "defrost_running"
        _f1_ = _des_.fetch_unaligned_unsigned(1)
        # Temporary _f2_ holds the value of "external_heater"
        _f2_ = _des_.fetch_unaligned_unsigned(1)
        # Temporary _f3_ holds the value of "internal_heater"
        _f3_ = _des_.fetch_unaligned_unsigned(1)
        # Temporary _f4_ holds the value of "error_type_h"
        _f4_ = _des_.fetch_unaligned_unsigned(1)
        # Temporary _f5_ holds the value of "error_number"
        _f5_ = _des_.fetch_unaligned_unsigned(8)
        # Temporary _f6_ holds the value of "zone1_actual_temp"
        _f6_ = _des_.fetch_unaligned_signed(8)
        # Temporary _f7_ holds the value of "dhw_actual_temp"
        _f7_ = _des_.fetch_unaligned_signed(8)
        # Temporary _f8_ holds the value of "outdoor_temp"
        _f8_ = _des_.fetch_unaligned_signed(8)
        # Temporary _f9_ holds the value of "return_temp"
        _f9_ = _des_.fetch_unaligned_signed(8)
        # Temporary _f10_ holds the value of "flow_temp"
        _f10_ = _des_.fetch_unaligned_signed(8)
        # Temporary _f11_ holds the value of "zone1_flow_temp"
        _f11_ = _des_.fetch_unaligned_signed(8)
        # Temporary _f12_ holds the value of "zone1_flow_target_temp"
        _f12_ = _des_.fetch_unaligned_signed(8)
        # Temporary _f13_ holds the value of "heat_shift_target_temp"
        _f13_ = _des_.fetch_unaligned_signed(8)
        # Temporary _f14_ holds the value of "flow_target_temp"
        _f14_ = _des_.fetch_unaligned_signed(8)
        # Temporary _f15_ holds the value of "discharge_temp"
        _f15_ = _des_.fetch_unaligned_signed(8)
        # Temporary _f16_ holds the value of "room_thermostat_temp"
        _f16_ = _des_.fetch_unaligned_signed(8)
        # Temporary _f17_ holds the value of "indoor_pipe_temp"
        _f17_ = _des_.fetch_unaligned_signed(8)
        # Temporary _f18_ holds the value of "outdoor_pipe_temp"
        _f18_ = _des_.fetch_unaligned_signed(8)
        # Temporary _f19_ holds the value of "defrost_temp"
        _f19_ = _des_.fetch_unaligned_signed(8)
        # Temporary _f20_ holds the value of "eva_outlet_temp"
        _f20_ = _des_.fetch_unaligned_signed(8)
        # Temporary _f21_ holds the value of "bypass_outlet_temp"
        _f21_ = _des_.fetch_unaligned_signed(8)
        # Temporary _f22_ holds the value of "ipm_temp"
        _f22_ = _des_.fetch_unaligned_signed(8)
        # Temporary _f23_ holds the value of "high_pressure"
        _f23_ = _des_.fetch_unaligned_signed(8)
        # Temporary _f24_ holds the value of "low_pressure"
        _f24_ = _des_.fetch_unaligned_signed(8)
        # Temporary _f25_ holds the value of "compressor_current"
        _f25_ = _des_.fetch_unaligned_f32()
        # Temporary _f26_ holds the value of "compressor_frequency"
        _f26_ = _des_.fetch_unaligned_unsigned(8)
        # Temporary _f27_ holds the value of "pump_flow"
        _f27_ = _des_.fetch_unaligned_f32()
        # Temporary _f28_ holds the value of "pump_speed"
        _f28_ = _des_.fetch_unaligned_unsigned(16)
        # Temporary _f29_ holds the value of "pump_duty"
        _f29_ = _des_.fetch_unaligned_unsigned(8)
        # Temporary _f30_ holds the value of "fan1_rpm"
        _f30_ = _des_.fetch_unaligned_unsigned(16)
        # Temporary _f31_ holds the value of "fan2_rpm"
        _f31_ = _des_.fetch_unaligned_unsigned(16)
        # Temporary _f32_ holds the value of "compressor_starts"
        _f32_ = _des_.fetch_unaligned_unsigned(16)
        # Temporary _f33_ holds the value of "compressor_hours"
        _f33_ = _des_.fetch_unaligned_unsigned(16)
        # Temporary _f34_ holds the value of "heat_hours"
        _f34_ = _des_.fetch_unaligned_unsigned(16)
        # Temporary _f35_ holds the value of "dhw_hours"
        _f35_ = _des_.fetch_unaligned_unsigned(16)
        self = heating_status_1_0(
            valve_position_dhw=_f0_,
            defrost_running=_f1_,
            external_heater=_f2_,
            internal_heater=_f3_,
            error_type_h=_f4_,
            error_number=_f5_,
            zone1_actual_temp=_f6_,
            dhw_actual_temp=_f7_,
            outdoor_temp=_f8_,
            return_temp=_f9_,
            flow_temp=_f10_,
            zone1_flow_temp=_f11_,
            zone1_flow_target_temp=_f12_,
            heat_shift_target_temp=_f13_,
            flow_target_temp=_f14_,
            discharge_temp=_f15_,
            room_thermostat_temp=_f16_,
            indoor_pipe_temp=_f17_,
            outdoor_pipe_temp=_f18_,
            defrost_temp=_f19_,
            eva_outlet_temp=_f20_,
            bypass_outlet_temp=_f21_,
            ipm_temp=_f22_,
            high_pressure=_f23_,
            low_pressure=_f24_,
            compressor_current=_f25_,
            compressor_frequency=_f26_,
            pump_flow=_f27_,
            pump_speed=_f28_,
            pump_duty=_f29_,
            fan1_rpm=_f30_,
            fan2_rpm=_f31_,
            compressor_starts=_f32_,
            compressor_hours=_f33_,
            heat_hours=_f34_,
            dhw_hours=_f35_)
        _des_.pad_to_alignment(8)
        assert 360 <= (_des_.consumed_bit_length - _base_offset_) <= 360, \
            'Bad deserialization of housebus.heating.heating_status.1.0'
        assert isinstance(self, heating_status_1_0)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'valve_position_dhw=%s' % self.valve_position_dhw,
            'defrost_running=%s' % self.defrost_running,
            'external_heater=%s' % self.external_heater,
            'internal_heater=%s' % self.internal_heater,
            'error_type_h=%s' % self.error_type_h,
            'error_number=%s' % self.error_number,
            'zone1_actual_temp=%s' % self.zone1_actual_temp,
            'dhw_actual_temp=%s' % self.dhw_actual_temp,
            'outdoor_temp=%s' % self.outdoor_temp,
            'return_temp=%s' % self.return_temp,
            'flow_temp=%s' % self.flow_temp,
            'zone1_flow_temp=%s' % self.zone1_flow_temp,
            'zone1_flow_target_temp=%s' % self.zone1_flow_target_temp,
            'heat_shift_target_temp=%s' % self.heat_shift_target_temp,
            'flow_target_temp=%s' % self.flow_target_temp,
            'discharge_temp=%s' % self.discharge_temp,
            'room_thermostat_temp=%s' % self.room_thermostat_temp,
            'indoor_pipe_temp=%s' % self.indoor_pipe_temp,
            'outdoor_pipe_temp=%s' % self.outdoor_pipe_temp,
            'defrost_temp=%s' % self.defrost_temp,
            'eva_outlet_temp=%s' % self.eva_outlet_temp,
            'bypass_outlet_temp=%s' % self.bypass_outlet_temp,
            'ipm_temp=%s' % self.ipm_temp,
            'high_pressure=%s' % self.high_pressure,
            'low_pressure=%s' % self.low_pressure,
            'compressor_current=%s' % self.compressor_current,
            'compressor_frequency=%s' % self.compressor_frequency,
            'pump_flow=%s' % self.pump_flow,
            'pump_speed=%s' % self.pump_speed,
            'pump_duty=%s' % self.pump_duty,
            'fan1_rpm=%s' % self.fan1_rpm,
            'fan2_rpm=%s' % self.fan2_rpm,
            'compressor_starts=%s' % self.compressor_starts,
            'compressor_hours=%s' % self.compressor_hours,
            'heat_hours=%s' % self.heat_hours,
            'dhw_hours=%s' % self.dhw_hours,
        ])
        return f'housebus.heating.heating_status.1.0({_o_0_})'

    _EXTENT_BYTES_ = 45

    _MODEL_: _pydsdl_.StructureType = _dsdl_.CompositeObject._restore_constant_(
        'ABzY8WTK5>0{`up&u<iE7{^;^p)D=6v?b95S~V3+>~6R1mZBgL0%}ST!Qw&5>pMH|_L(}reCM5|OM*%iLz6*`4AFxmCI%0B(3>9g'
        'pb2_V5<Tca5B>!Z6XVHXd}rTXSh{`Rcc&LG?PX@W-_PfH-*;x-d9tsyUEVR&Qu&L9{IVICb_NB6TG+PEV8bRERPY?%3oJ(BsOJQu'
        'VS$B|JX`ijd?|kDTzod(6}2N5JN)}0@WOx?VUPiWndQ#cjwoQ5g+Uy3pc0{h<+(AmL>o_5&o9L@turle#^>T_6T*y9%Lo|>;#1r$'
        '8P)An9JL>|h;7~(O&2mT!-yqAl;J+L9E({cp6H)*18d$T=2I>s^Mu|#wN1#d7_x~w&w!7T%L_PQ$ni`P!$7p{SWT2*nS=bh+2kue'
        'qn7jW@i-btrtX@Un)RZk(17-6YYE#Wf-0-amjRh@I*!_q=@sIrCFYS{F$m~~ZPl}TW?JE1*a1Vru*D=r>hbZ=&~^Db$8aCq-xNp|'
        '8KEw=QF4U{Z637T)q&lFQjb=y3IY|?A*c)Wlp8w6O0@=}z7x`Gx7^it#&byyVSWSi;WOg+jl%saqg(i;Sryprh0OGld8eT^QNkZG'
        'HyzYjw7t_QrzKV-J-DqN#B`pplzejYpa85QTNU5C>dKo<D=0t$rsD>v=Q)T0p^leqW+}&Oxs|)XxBQfK`)W5(dbGQ?Ii$NMNC_ie'
        ')K0syTaB`hgJ4x`hvhrzh#s)!fp6m^2>9!$`87%I8#y%)bsn}o%$DyX!&L|0{vAB;S}f#yJb&US-xK)GoxIo%SI;>X?VOk#8=oGZ'
        'n4FrLn9h$+Pv`ec=W@HpCUeshlhc#=+|-`&{N&_VoV+5$;w5j{WLW%47eY#j%bMOJ2kO`&B`=4>EtDJS4;y9!AHm0~7;C2=I)3HZ'
        'R}HbZeu!NaB=89_o1T^^V}`8UbeWDKc5{gOPAXzN7139>+I%CRENB|-twVXIM4KnOD*I(RrZahG)gvV8uWPQ5Q5IcWf(}C;?1Ts4'
        'Vb}#Z7=<Yqheu&I9Du#>1RR7T@FY9~vv3lQ!}IVQya+D<0SpUJ1P@*U20oM_gje7UybiCz1$YB4!V<g-Z^3(T2|j@L;S;z5pTVc_'
        '1$+))!I$t2d=1~hx9|ge4?n?=@C*D5zrnBY2mBuLw#y`ZsS3QsFyp0YGb&n(#N@3KWymt)qfs9U_|yu7e_`_$3iGBaf-HCr$?_JI'
        'W{Vyryfes#xKzMyDK~1lMLS$HjnUJT_p&rw2m{7<^xLgskgYYZ*=p08y}NnM<T7I!q2o;>0vzzN$%C4-mL;n|;-zGrc>`zId_#D!'
        ')_C4&`*@Ho{~Sl%2P}4^^7#b+Slx7@^~m$%Xjmo*%8udL7H<^$XNlwSwl>*&p7sgF%%gYO*A1uu7H^K>X0+uPHcdXAh7kM(f8IX3'
        '84Vuv++^L|6_rt^F!G5f?Rg#f_X@UuDrfNTT5>J9mRw7&CI7D^-~W$>wvB1IVMpJ9O4trb{C2!+ruCh`h&uR-t@5gfXIevpzt9}Z'
        'O@8~}CwMVA*_izP5!yJRyAWCQv0M2a=V)jw>|WQ>Qt>W4!p~|>5*Q2n_~)5*3y+DzetzJg$N3?__9p-3)zm4Ce7(TdtL3tkM&2f{'
        'Hnm)q(#YEd)~=SzQjPMCdU=n)dem}RN+TZ>*q~Z2OKIfW1-4x+m!&lF5rK`U<+7AUJ}R(LwOp3c$nyfrtL3tkM!rvA`_yt-N+Ulc'
        'utRFOETxgp3T##_m!&lFIf2co<+7AUeoA1c)N)x$BPRkQYPl?>kvjr&)N)x$BM$`@s^zkjMt)XcXVr39N+Ulnu=8rUETxfO6xc<z'
        'T$a+vFAMClS}sdz<W~fCMJ<=5H1ewgyQ-GUQjPNAdigbhT~o_tDb2{Q3+%dDE=y@fenVh4)N)y>QQliGza_9+YPl?>UY6PR)(V##'
        'ReD8EJ^I<fDmbVqAkS$Ej8wr9O#yjMQy^aj^O^$koTk8`DtJg!K%UbSn5%+wnga5irU0peWaR=KwE|Gh!SY;Sghu8+CcERFDIWj;'
    )
    assert isinstance(_MODEL_, _pydsdl_.StructureType)
