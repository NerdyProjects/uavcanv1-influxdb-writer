# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/user/foreign/uavcanv1-influxdb-writer/public_regulated_data_types/uavcan/pnp/cluster/391.RequestVote.1.0.uavcan
#
# Generated at:  2021-11-11 23:08:22.848877 UTC
# Is deprecated: no
# Fixed port ID: 391
# Full name:     uavcan.pnp.cluster.RequestVote
# Version:       1.0
#
# pylint: skip-file

from __future__ import annotations
import numpy as _np_
import typing as _ty_
import pydsdl as _pydsdl_
import pyuavcan.dsdl as _dsdl_


# noinspection PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class RequestVote_1_0(_dsdl_.FixedPortServiceObject):
    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Request(_dsdl_.CompositeObject):
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     term:           _ty_.Optional[_ty_.Union[int, _np_.uint32]] = None,
                     last_log_term:  _ty_.Optional[_ty_.Union[int, _np_.uint32]] = None,
                     last_log_index: _ty_.Optional[_ty_.Union[int, _np_.uint16]] = None) -> None:
            """
            uavcan.pnp.cluster.RequestVote.Request.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param term:           saturated uint32 term
            :param last_log_term:  saturated uint32 last_log_term
            :param last_log_index: saturated uint16 last_log_index
            """
            self._term:           int
            self._last_log_term:  int
            self._last_log_index: int

            self.term = term if term is not None else 0

            self.last_log_term = last_log_term if last_log_term is not None else 0

            self.last_log_index = last_log_index if last_log_index is not None else 0

        @property
        def term(self) -> int:
            """
            saturated uint32 term
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._term

        @term.setter
        def term(self, x: _ty_.Union[int, _np_.uint32]) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 4294967295:
                self._term = x
            else:
                raise ValueError(f'term: value {x} is not in [0, 4294967295]')

        @property
        def last_log_term(self) -> int:
            """
            saturated uint32 last_log_term
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._last_log_term

        @last_log_term.setter
        def last_log_term(self, x: _ty_.Union[int, _np_.uint32]) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 4294967295:
                self._last_log_term = x
            else:
                raise ValueError(f'last_log_term: value {x} is not in [0, 4294967295]')

        @property
        def last_log_index(self) -> int:
            """
            saturated uint16 last_log_index
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._last_log_index

        @last_log_index.setter
        def last_log_index(self, x: _ty_.Union[int, _np_.uint16]) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 65535:
                self._last_log_index = x
            else:
                raise ValueError(f'last_log_index: value {x} is not in [0, 65535]')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: RequestVote_1_0.Request._SerializerTypeVar_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.add_aligned_u32(max(min(self.term, 4294967295), 0))
            _ser_.add_aligned_u32(max(min(self.last_log_term, 4294967295), 0))
            _ser_.add_aligned_u16(max(min(self.last_log_index, 65535), 0))
            _ser_.pad_to_alignment(8)
            assert 80 <= (_ser_.current_bit_length - _base_offset_) <= 80, \
                'Bad serialization of uavcan.pnp.cluster.RequestVote.Request.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: RequestVote_1_0.Request._DeserializerTypeVar_) -> RequestVote_1_0.Request:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f0_ holds the value of "term"
            _f0_ = _des_.fetch_aligned_u32()
            # Temporary _f1_ holds the value of "last_log_term"
            _f1_ = _des_.fetch_aligned_u32()
            # Temporary _f2_ holds the value of "last_log_index"
            _f2_ = _des_.fetch_aligned_u16()
            self = RequestVote_1_0.Request(
                term=_f0_,
                last_log_term=_f1_,
                last_log_index=_f2_)
            _des_.pad_to_alignment(8)
            assert 80 <= (_des_.consumed_bit_length - _base_offset_) <= 80, \
                'Bad deserialization of uavcan.pnp.cluster.RequestVote.Request.1.0'
            assert isinstance(self, RequestVote_1_0.Request)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'term=%s' % self.term,
                'last_log_term=%s' % self.last_log_term,
                'last_log_index=%s' % self.last_log_index,
            ])
            return f'uavcan.pnp.cluster.RequestVote.Request.1.0({_o_0_})'

        _FIXED_PORT_ID_ = 391
        _EXTENT_BYTES_ = 48

        _MODEL_: _pydsdl_.DelimitedType = _dsdl_.CompositeObject._restore_constant_(
            'ABzY8W}=N@0{?YXZEqYk5Wa{s4M|f{wGAL7x(Hf=)a*5?cqvGTrUg_Txt^}2-;m|qox3sk?8WvTcSuO>2T&_nB2vwF{u_UU@$MzL'
            'yxd8r9ozGa$Im=7&zJxCZ>3fL{Ec#2*g~evf)QMb-+3k>Ww{=e+6o83Z#)DkMr0OGrzM2f;gc8PkFf1mm{1B#z?R>5;!Ksh%D_pN'
            '3rz75g}7Dman4m*sxr-GWgVEb55HDm-81dr&<=i;jlo!<Rg8M^+01?&I!m3_U*SdY>x?^RL{>Sl;U~IcLH<Wx!C&}JfGm!aT4M!w'
            'oVl3kB6w-yi^Z5cuKuX37%C_pDF;I^CttYEGU1p6HFOv{2?fu&b!?;y2>7nw>Kz7(u=D|)?Z+c}QR~mp5B?gnj;n&3Vm{EzD#JCu'
            'Of-#xUuK2QgKq`eyxv@k@8Ekg>-|oGH}FIJsKIQ=c)ip^R)g^te!Kv-IS;#h1QV)&3E}*99|m9&rxS;e^!dOgB`;}bpiKgkQgX!|'
            'RVSsqz+auK3(KZW-Qz_!aSLzbHtyn1MQjyN8pt_`DZKKR*+5L7V5K&Wi6V6U6=rp1a-ahVtmMRnuiB_b(5|RLZMqw%80|(+<J}#h'
            '2C|wI+0Ji<6l&UKl}V8^1H($jTaIgOXP`ETussuD`|iEn6GGfg@1%_z6`motl!F1~qCCbThwze^!KWx}5@ROx<wT2di5?vDlxt-{'
            '*@_P3P*Y+!N|T-hZXq%AtkyB^mnEp;TSfGNt=TQWaUpFQYoAF={d1_&V~tQo?({nNOMAloP_LiRa;8%M2GeEm$)X^3I?6P$Mo->{'
            'k)|Gqb$v{==1!aWhR;z@C*hudtH+B%sNoqW{2m`3S$qEa1Fd4U)wv=4n@vPwIQH@!^3gfb9@iH37kN@v-AYPsrf2S1VPh^U2!Ds|'
            'PI6!~nlokd0GcdSMl_FvitS4VpG4zgY+;g6M6WTDJ6H86>QcL8O(Jj@4Qz(k`3433f2IQ&orW>++3k7k<`K3>PQ7{TYISzoX0cUq'
            '9WUV~UWqJhQD5x<-aXxC_~|SBtc#!H7kG~Zi(k@nU_w=JVgLD(-=Z#TCc0q=yr54#3{TCJ4?0V6L^UJgEBw02{QiQ9oF?Uj4BqZ@'
            'HH1Et;KU+r{nAi>hXC`jRuAfTV;2SG9?9se#{JfTty!rFjEDc8a~PrN|EoYyLGA_s00'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Response(_dsdl_.CompositeObject):
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     term:         _ty_.Optional[_ty_.Union[int, _np_.uint32]] = None,
                     vote_granted: _ty_.Optional[bool] = None) -> None:
            """
            uavcan.pnp.cluster.RequestVote.Response.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param term:         saturated uint32 term
            :param vote_granted: saturated bool vote_granted
            """
            self._term:         int
            self._vote_granted: bool

            self.term = term if term is not None else 0

            self.vote_granted = vote_granted if vote_granted is not None else False

        @property
        def term(self) -> int:
            """
            saturated uint32 term
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._term

        @term.setter
        def term(self, x: _ty_.Union[int, _np_.uint32]) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 4294967295:
                self._term = x
            else:
                raise ValueError(f'term: value {x} is not in [0, 4294967295]')

        @property
        def vote_granted(self) -> bool:
            """
            saturated bool vote_granted
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._vote_granted

        @vote_granted.setter
        def vote_granted(self, x: bool) -> None:
            self._vote_granted = bool(x)  # Cast to bool implements saturation

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: RequestVote_1_0.Response._SerializerTypeVar_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.add_aligned_u32(max(min(self.term, 4294967295), 0))
            _ser_.add_unaligned_bit(self.vote_granted)
            _ser_.pad_to_alignment(8)
            assert 40 <= (_ser_.current_bit_length - _base_offset_) <= 40, \
                'Bad serialization of uavcan.pnp.cluster.RequestVote.Response.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: RequestVote_1_0.Response._DeserializerTypeVar_) -> RequestVote_1_0.Response:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f3_ holds the value of "term"
            _f3_ = _des_.fetch_aligned_u32()
            # Temporary _f4_ holds the value of "vote_granted"
            _f4_ = _des_.fetch_unaligned_bit()
            self = RequestVote_1_0.Response(
                term=_f3_,
                vote_granted=_f4_)
            _des_.pad_to_alignment(8)
            assert 40 <= (_des_.consumed_bit_length - _base_offset_) <= 40, \
                'Bad deserialization of uavcan.pnp.cluster.RequestVote.Response.1.0'
            assert isinstance(self, RequestVote_1_0.Response)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'term=%s' % self.term,
                'vote_granted=%s' % self.vote_granted,
            ])
            return f'uavcan.pnp.cluster.RequestVote.Response.1.0({_o_0_})'

        _FIXED_PORT_ID_ = 391
        _EXTENT_BYTES_ = 48

        _MODEL_: _pydsdl_.DelimitedType = _dsdl_.CompositeObject._restore_constant_(
            'ABzY8W}=N@0{?YXQE%Kt5WW*h6Oxotm8Kvh>WY#c5A`Lq1%X6`8bCrOM|GtYqODeId+uh1z3c9-j~o(G`v7XBm59{ko!`bUVb)F)'
            'A8k&uZah2l?aVjd`03K$|1S5MpSxVmbCVY_GoS@8#BV$;AZD2=D`kWQ@6LV=g(%6)f1Fp~U-*xo`QQD(onb;s&>nm4>^-aN%+?wf'
            'LzbE3B|%)P`7Glyu4ENwMQtqTcnnW!F!q76K(?urG!(hYW}uBwGQh4pII>^(q@VQu^v}FoXWUvX(%ORYkLiw68aR&fZuwgQMSfD%'
            '8q2xm%!X1=ORscjS<EQn!hLDPR6_opv@iv|*y1`%g=GcEsYRbe1fFqYS*ddH_@3Lm`w}Rm#k+L27mlc--XDJK-8;-!E_1H)F3|Hj'
            '#WlA?JeA%pv0P=|^*lK*w%6jjguQ-8sRFoMC<s4D`gj>X#H$Al#>R{YW>d|n_}t@`8;oHBI<hLV2+^2NY*g`zJQJlO*slsMxh2wL'
            'x(?ih4&5xBxAP3we1w}A<De!2a;P+9Jm4R=x7bANL(VFtEfcvPx%14ZT4z891+a=!d#)a$Dq&a?=|j2~h~HtWk=f35Atyz>pQqP<'
            ')ucK-tm?E78PhPWi*U=y_{>q#kc2fn64vm>=Q|7H+KIR0HjHM;kQ=H&gS27dGm(LRj$3$*SWXM$-PTJzoJ@lP?f>7s+qfg__s#n~'
            'dOf1wy}?xFU340VnU|@eW~h=qC>5zKQ2hhZ&#ltk-O5mqX7RQ=cbDh6kkeO!a2LNiwr;zNyGn*3$k#%;H(Nw%JZw!T^P3LFxlvsd'
            'T+d(0KEr0bsKNi`2T62jQrgq1EsHj@PKmry$RK|*_<k@}!V1v5LiQRXU2)m0@`zM<zX8Rc0$QKYz@+#vxq^@Ac}xc^1pS<>*1<g>'
            '_u$xV(x7Tw#|?ZN&xcMnaR9j8l_Y+0fHy{X6K~<C?QB=50Aj}ay{CP*NrG)ZXqqALoc@|m0lt5{K@n}xm82gQ6t9L|{0zTnYyPss'
            'T++Hmp^9!xfuM!aTpDvZg)vlM#cA{Yr6q2g61rHchfT*1NBD?p4>TmJ!QVSH4Id44;qaf=9EQ~RKfXK{^6dox00'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    def __repr__(self) -> str:
        return 'uavcan.pnp.cluster.RequestVote.1.0()'


    _FIXED_PORT_ID_ = 391
    _MODEL_: _pydsdl_.ServiceType = _dsdl_.CompositeObject._restore_constant_(
        'ABzY8W}=N@0{^vEZExH}5KcteguFDVN`pj2a0MzUG`^-th<8c@t*UE6l!WpLt=9J3jlo{KyXzxC0$L%Ukyaw8%SR+oKhRJ7Dg@$R'
        'Fl%3O??iw&>2&Med1hyxd1icfCw^F)9xFfQnS3u&QQ|WNGUiGA84nWhS(v4HreY1&%xr^f#UbqM<zOG!i}&p3cG=7^33m!mnrXL>'
        'V`lDMNaB<rQLp7m77GEgG}+d&2z4R*oSk5Tr*zeYg1160{9NRIm=sEb^tY;OZf6<}*Vat27DyFm!g-y%-CjSi_3`@HH})O{&A8Sw'
        '4hjv*eneM{$n(g`niJP!NTN<q(=6heSLuy{=h9^yx5(nm2SUY70ntsNp$W1#!x<LDnk68b8g1Pp=OHKV(kvqGmdxVjp(6+L*XV5B'
        '9Z^POU)wEfo?uFI5pfxHJGx&4IBzD1rqr4V7G<F|W0p3bs;<SS(QB`st$X+!F5|@tGncsQldQ=~FusVFM!*)jVW*B@v4~)oaAtW6'
        '8X!HLc^bjn;tlQPJg1#TCOz2A6E3)>>i85Fm@{2<VZmNicX!bXcn()_1z*N11+f)DE+OP3CcAG=u|~WL5z8~FSsd97bDF8FkRi}P'
        '0xajmg(+&7rBExVLN&S@s2H_MPp#FJSTvGiHwsohm84Kv%Znh1L(*`wNZc)*TB|mwMk1`WMOb_3)zuy$uKJh#%8UxnkSmHog3wML'
        'u2<}RVg`3GR-W_e(Jv=jr1r8#ho>+T3WO@?FllBK7^c3rnE+Sd$!=ClAMfNji0C~*^nohbjX?7_QNF8vkSOY(LzQ+kLJ{fyXKQA!'
        '#rjtHyiJd7m72#`mRsYEa-#OqAS2c&<#k9i>H$~R_o>!gXR^EDLyW1D@P?V+<WUrh=7162!kb5{8|Lg<CS0|}P?zTM$|EuCdbta^'
        'F~r+Wxxx=eSyEIRMUrs2H*n8M*5XM4_B*>=_YPD*b0)76pvh7ML~|Mo*S@siyKXV*T9_o{(9?|M&P6$jHmF^iRUjW9dIJ?;TEB{d'
        'z8M|daYl)AJh<JBT{yySlF?>2cB&ZMR)K3(T)@+K78e~0=cuo)0KU@SXZYGazP^EP;G6gs2^Qa`bYPdNpzZqIakEHWSWR@v5O_pC'
        ')vWKGDHrPFZbVfh;wr9HkzXHCk$zHoWbot`7fslL9CSQNTc1?aUnW4euc?DF?{otN#qP+cPr3cE168t866g+p8gl5MG-V{H+_hvo'
        '&B=CT(>U8+&70?seM40)Y=`}0XYs`F5xit(u4Nfb1JUy;A@q2K-Y?O!ExMOAB^Pd3{?mb6iQ*T0h`-{a0YO|EUeABibpv%j6uw8|'
        '^@a<7{7Crc$>{u`@Rw<OxnKA{cc_1ekB-go3n!N^`)c#me^>MO?bZJvRjT^Z-|KLw{H6#u+5XoyD7PQ!bV?q{w>)l>_dEWEf8rk%'
        'dF$VfSM=?>iBSapU&XGQ?M?~+00'
    )
    assert isinstance(_MODEL_, _pydsdl_.ServiceType)
