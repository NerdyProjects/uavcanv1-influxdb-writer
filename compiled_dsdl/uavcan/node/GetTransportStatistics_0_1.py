# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/user/foreign/uavcanv1-influxdb-writer/public_regulated_data_types/uavcan/node/434.GetTransportStatistics.0.1.uavcan
#
# Generated at:  2021-11-11 23:08:22.893035 UTC
# Is deprecated: no
# Fixed port ID: 434
# Full name:     uavcan.node.GetTransportStatistics
# Version:       0.1
#
# pylint: skip-file

from __future__ import annotations
import numpy as _np_
import typing as _ty_
import pydsdl as _pydsdl_
import pyuavcan.dsdl as _dsdl_
import uavcan.node


# noinspection PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class GetTransportStatistics_0_1(_dsdl_.FixedPortServiceObject):
    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Request(_dsdl_.CompositeObject):
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self) -> None:
            """
            uavcan.node.GetTransportStatistics.Request.0.1
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            """
            pass

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: GetTransportStatistics_0_1.Request._SerializerTypeVar_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.pad_to_alignment(8)
            assert 0 <= (_ser_.current_bit_length - _base_offset_) <= 0, \
                'Bad serialization of uavcan.node.GetTransportStatistics.Request.0.1'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: GetTransportStatistics_0_1.Request._DeserializerTypeVar_) -> GetTransportStatistics_0_1.Request:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            self = GetTransportStatistics_0_1.Request(
                    )
            _des_.pad_to_alignment(8)
            assert 0 <= (_des_.consumed_bit_length - _base_offset_) <= 0, \
                'Bad deserialization of uavcan.node.GetTransportStatistics.Request.0.1'
            assert isinstance(self, GetTransportStatistics_0_1.Request)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
            ])
            return f'uavcan.node.GetTransportStatistics.Request.0.1({_o_0_})'

        _FIXED_PORT_ID_ = 434
        _EXTENT_BYTES_ = 0

        _MODEL_: _pydsdl_.StructureType = _dsdl_.CompositeObject._restore_constant_(
            'ABzY8W}=N@0{?YVU29Y^5M61trG6p4Ye0}H?7bG-Kj4cGt5v$iHwnqj?A}0ba!n@Ny+Xmhh=qVc<NtNi?V?ngr<u%T&YY9;ZS(iR'
            '#^~~-r~ROUG8GTtwJ`dtkOnH=xUP3WBjj{{ias_NJsb}`<cs{`ET87xbemhzQT=5Ui$>VWItA5Rz+*3L=$*$Y3e*906RIQl5+Ptt'
            '+k62&XlHXfN?V_<;)^^PO>TY9XF1*F0?}(35kmf))8l_~E{7H7Y3WnYduRlL%IE0;pXntiUU0cq`7k}=!A0Ky6%6oRV4KrWx2}Ua'
            '64!d>Jm|TtSKBZ4#@fzITq-#}@x<HLeUwHw+`~MYg2I(R!I3lwSC8sKx!!-he-rIj)n2t~Eks%oXb%q-i`Wa@K>m?7xpGZT=SM&a'
            '+rR`1fXvO<94vTYm~kg#0}C(=*9a`EA*kNCXldP0?M!JX1&kmVSi1LO4vLX<%sOPA{y=-WK*xgUdIJnwV1*SE=(;k^3{|F;qzO4a'
            'Upqr;<Ob{<TiP41=Q-Vbqw(EkKBe@^A8CWTJ|}k5kT7)8k-j9%d*~eb4#^20dg6@E|8?0N-n81N+&)PUKMJL^o&VR=J}cG3XpHc~'
            '^(swR2ooXy%)67(uOP{T{c2F2Y)46SJ8j8;B@oLJZ1K)1`t<U8hr_Zb-HS~RqYN_2>JQK0SA0MN000'
        )
        assert isinstance(_MODEL_, _pydsdl_.StructureType)

    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Response(_dsdl_.CompositeObject):
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        MAX_NETWORK_INTERFACES: int = 3

        def __init__(self,
                     transfer_statistics:          _ty_.Optional[uavcan.node.IOStatistics_0_1] = None,
                     network_interface_statistics: _ty_.Optional[_ty_.Union[_np_.ndarray, _ty_.List[uavcan.node.IOStatistics_0_1]]] = None) -> None:
            """
            uavcan.node.GetTransportStatistics.Response.0.1
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param transfer_statistics:          uavcan.node.IOStatistics.0.1 transfer_statistics
            :param network_interface_statistics: uavcan.node.IOStatistics.0.1[<=3] network_interface_statistics
            """
            self._transfer_statistics:          uavcan.node.IOStatistics_0_1
            self._network_interface_statistics: _np_.ndarray

            if transfer_statistics is None:
                self.transfer_statistics = uavcan.node.IOStatistics_0_1()
            elif isinstance(transfer_statistics, uavcan.node.IOStatistics_0_1):
                self.transfer_statistics = transfer_statistics
            else:
                raise ValueError(f'transfer_statistics: expected uavcan.node.IOStatistics_0_1 '
                                 f'got {type(transfer_statistics).__name__}')

            if network_interface_statistics is None:
                self.network_interface_statistics = _np_.array([], object)
            else:
                if isinstance(network_interface_statistics, _np_.ndarray) and network_interface_statistics.dtype == object and network_interface_statistics.ndim == 1 and network_interface_statistics.size <= 3:
                    # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                    self._network_interface_statistics = network_interface_statistics
                else:
                    # Last resort, slow construction of a new array. New memory may be allocated.
                    network_interface_statistics = _np_.array(network_interface_statistics, object).flatten()
                    if not network_interface_statistics.size <= 3:  # Length cannot be checked before casting and flattening
                        raise ValueError(f'network_interface_statistics: invalid array length: not {network_interface_statistics.size} <= 3')
                    self._network_interface_statistics = network_interface_statistics
                assert isinstance(self._network_interface_statistics, _np_.ndarray)
                assert self._network_interface_statistics.dtype == object
                assert self._network_interface_statistics.ndim == 1
                assert len(self._network_interface_statistics) <= 3

        @property
        def transfer_statistics(self) -> uavcan.node.IOStatistics_0_1:
            """
            uavcan.node.IOStatistics.0.1 transfer_statistics
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._transfer_statistics

        @transfer_statistics.setter
        def transfer_statistics(self, x: uavcan.node.IOStatistics_0_1) -> None:
            if isinstance(x, uavcan.node.IOStatistics_0_1):
                self._transfer_statistics = x
            else:
                raise ValueError(f'transfer_statistics: expected uavcan.node.IOStatistics_0_1 got {type(x).__name__}')

        @property
        def network_interface_statistics(self) -> _np_.ndarray:
            """
            uavcan.node.IOStatistics.0.1[<=3] network_interface_statistics
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._network_interface_statistics

        @network_interface_statistics.setter
        def network_interface_statistics(self, x: _ty_.Union[_np_.ndarray, _ty_.List[uavcan.node.IOStatistics_0_1]]) -> None:
            if isinstance(x, _np_.ndarray) and x.dtype == object and x.ndim == 1 and x.size <= 3:
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._network_interface_statistics = x
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                x = _np_.array(x, object).flatten()
                if not x.size <= 3:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'network_interface_statistics: invalid array length: not {x.size} <= 3')
                self._network_interface_statistics = x
            assert isinstance(self._network_interface_statistics, _np_.ndarray)
            assert self._network_interface_statistics.dtype == object
            assert self._network_interface_statistics.ndim == 1
            assert len(self._network_interface_statistics) <= 3

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: GetTransportStatistics_0_1.Response._SerializerTypeVar_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.pad_to_alignment(8)
            self.transfer_statistics._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
            assert len(self.network_interface_statistics) <= 3, 'self.network_interface_statistics: uavcan.node.IOStatistics.0.1[<=3]'
            _ser_.add_aligned_u8(len(self.network_interface_statistics))
            for _elem0_ in self.network_interface_statistics:
                _ser_.pad_to_alignment(8)
                _elem0_._serialize_(_ser_)
                assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            _ser_.pad_to_alignment(8)
            assert 128 <= (_ser_.current_bit_length - _base_offset_) <= 488, \
                'Bad serialization of uavcan.node.GetTransportStatistics.Response.0.1'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: GetTransportStatistics_0_1.Response._DeserializerTypeVar_) -> GetTransportStatistics_0_1.Response:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f0_ holds the value of "transfer_statistics"
            _des_.pad_to_alignment(8)
            _f0_ = uavcan.node.IOStatistics_0_1._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f1_ holds the value of "network_interface_statistics"
            _des_.pad_to_alignment(8)
            # Length field byte-aligned: True; all elements byte-aligned: True.
            _len0_ = _des_.fetch_aligned_u8()
            assert _len0_ >= 0
            if _len0_ > 3:
                raise _des_.FormatError(f'Variable array length prefix {_len0_} > 3')
            _f1_ = _np_.empty(_len0_, object)
            for _i0_ in range(_len0_):
                _des_.pad_to_alignment(8)
                _e0_ = uavcan.node.IOStatistics_0_1._deserialize_(_des_)
                assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
                _f1_[_i0_] = _e0_
            assert len(_f1_) <= 3, 'uavcan.node.IOStatistics.0.1[<=3]'
            _des_.pad_to_alignment(8)
            self = GetTransportStatistics_0_1.Response(
                transfer_statistics=_f0_,
                network_interface_statistics=_f1_)
            _des_.pad_to_alignment(8)
            assert 128 <= (_des_.consumed_bit_length - _base_offset_) <= 488, \
                'Bad deserialization of uavcan.node.GetTransportStatistics.Response.0.1'
            assert isinstance(self, GetTransportStatistics_0_1.Response)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'transfer_statistics=%s' % self.transfer_statistics,
                'network_interface_statistics=%s' % _np_.array2string(self.network_interface_statistics, separator=',', edgeitems=10, threshold=1024, max_line_width=10240000),
            ])
            return f'uavcan.node.GetTransportStatistics.Response.0.1({_o_0_})'

        _FIXED_PORT_ID_ = 434
        _EXTENT_BYTES_ = 192

        _MODEL_: _pydsdl_.DelimitedType = _dsdl_.CompositeObject._restore_constant_(
            'ABzY8W}=N@0{`ur&2QYs6~HO2BvY%EtZ&JZV~=G=mSbt9_#?69G>PLli95Bz%1&yaC<yLyR;0X3Zuucm0a_%77B)a23xoxN{ss99'
            'iX3~)HMjf;Irh+lPetG3yrHxkD@}v;W&_rn;mo{w^Eki9$KifD@RytCwftXtwtZlScC%`RB5<vy`-xR+imF-nTWvpdBax+}?~10|'
            'f};KKpe?d5vP++3f5=wSA=C9d5oC^*jy{NjxE{rU=<YITdR7ZmT#l{1y5&_p-xk&PMf5PRys+&D(Syi}+%R(MVRc);6)%L|y16HU'
            '(Dgl3ed1#(f01#G_x(BhEK5gBD~bZQ7Dpn?eh2d$vxuTsmJYt>il%*NS=qF$$TA}|*Eu0CI^}f!sG;{hJTxzJD$bZPz?pzaof#T6'
            'f86x#0Nv*9!Squfd7-=G3HzQGi5(GiyJ^I%xsllv-cICX9F416VPv+zh|D>c&KgP)4y)dQw)@xw9_jm2ww<NZW*AwXZ3XsGMNi`z'
            'tZ2lGTc&{FaR0J&z_k5(maaZ@1cQc}2$<hsVO+0^Fl@xl<^iL=On4E@DZ*+7dWy9==c%;JSDcH^WoK1RQ^9EhQ5RsPojKKX?MJ3i'
            '{r<~2<Whpb59Abo{lMR6Ez1L&@nXmvYfmu0UXKIlQ7xkdBC+Zbvqi)8U?$%~TbA<fOAK7b98eKC;(%F!V0AzCaOqffTkWQ3fq@nd'
            'Tgx>Fd$k;UO;`sD+oJ9^+`5J9p+@F|reNO<1+GV=Q%AO`Sv!y{;JVhFv(7bV!`XCRi{a+mq75Fg@CH3i$IOPC2-`$DOxMn~(g`#4'
            '<Df2}p()I^1-CYRyzcldu^z*QTW^3rU~jF<t-JT?n(H;1abnlj_5+|cSZ~L*rdx-*vlBOQmcy+d(x7$R@9RhRdv&AwYE?GE?lm1N'
            'gqZ_y2k!Abw=S}$PW91BpQhbrYV)yBMCjig0b#+dGuLa!(YhZ;Ah45EZ8gcyaKj?Uie&fPkD=qoO`CZ>sDTjBX!`rr^1TML*tLx{'
            '*x70zb3;&G5Ayqi+Xy-zu$J3wg753TXRk8oybtw45A<h$yn3A-2rCGsQtz-a-!tJV?gX}HHDe(M?*~>p@5CaXeIf$CTFy6B-X%P0'
            'ZcV_Z#^vujaFcR9=u$K^h&|8scB%+ptr=$NvWgamtb$Xc-g=f+-f^Q}<@E<prD&0sOuwC_>^LRiL96D&?S{K{U$lIPMYw-IY=es<'
            'KR6n_>tHHy#M6_8W!qrl4>~!9bH6C@bmorl;WqW2t1=yy8ex-QOg=Jl`#IVk<t690$MpoOwjfqm!NCva88UPKXP;*)e5DiC;Ca!O'
            '3xIeS*TBs!*TXOh1uMbA2@IvM_fa?3ah%rSeI)xymQeO}_yE-hNe-bL=<pLL2RnS2>SbylL3yIXD|CI7^o*gbbofb><qjW5sdxAU'
            '%ApRQr2bPV`#XG^^v$50>hM{VlN~;Xa-zfMQI2=`DU>HWd;#THhcBWW?eNny-%BV*I{XaHdluzzhclZ09ND`>cATemT_Ag2Mp^3c'
            'WwPrct!IVoyCnV2Um<y!<SNNEl2wxHBsWODO7aTHt0b?HyiW2plCP7zLGmWaO_H}rzCrRAB;O?Y7Rk3sen9dONrz-Y@(IZ=Nq$B0'
            'Ym(oP{Ep=JB%eunU+<&Byeh1y!VOjUKouUTf};wFDm+nzFIC|yRrp#JzEOqmRN;G7ct(X7vI&v2A>YCzimuh1$C5u!K_tSO^LuVM'
            '0sIgDBPRXFVA4;Rln4{O2a^(Eq7x?lgh`n&86-?J!lXi&=!D5Y4<-|Y$rxcWLYU};$sl3UPnawaCi8^JEMYQDm`oBT<Ali=VNxMX'
            '%7lqdm<$mn1B6L`4<;80lV!r>Wy0hFVRD`@St3l%5hjc<IZK$FAxvH(OimLfi-gGnVRDKvnI}x<2$NaDWQH)ACQPOXlS#s4f-o5;'
            'OmxD;AWRIx#2`!z!o(m<48p`9Obo)rAWRIx#88+R3KK(NVkk@ug^8gsF%%|-!o*OR7zz_ZVPYsu426lIFfkM+hQh??#Ll-=s5xzX'
            'jJ%-X1r0A~IQB`A02|3qU_(2G4UO37BQ{DsY?O%&jo2s=8#=L}^(0h%#72eK80ul;B(YH@HU^0ejo6qbHpYpK3bCOR8w13KMr<q+'
            '8}r1*46!juY@8%ED#XSxu`xt!lzP}$CN?e*8%x9nBR0+u8>fkl1!7~K*q9|YriqP7Vq=`x7$Y_+#73Fe(20#9Vq<{V=qENbV&fLE'
            'u}N&)BsOjk8ymz1BR0l~4UO1Hh>e8UNQjMu*hq+tgxE-kjYP4LC^izsMxxkA6dQ?RBT;N5ij73EktjA2#YUpoNE921Vk1#(B#Mnh'
            'v609pg&x14;ROvZXaE|*T7F7572)A-Lj-1c<n*+f{_UgNAK$sX#Z)tc_xgq(v@EYK4o`=|&2rRraM&{{>^?~hg%_<p|8Q|NKi_Lu'
            'Zd08FwnXIkc8FT@6F_;K<a#?la^Tl}GMO$ObI=?F)<KreeQd#1xFSz&ZsXPNlipEN$Vuqr`4pa-SZ%BBMh6)$rIYF`r-8@S)amdz'
            'RF}u0Pr#;ko%iK~`IpC>svLc8>+sy}I?9>bw!9s&E!rY-k2@cFERRo0FkmZ>a+(vsM*1IwIgR)6{vs{bcnN{)3V0eH=4HgOE9~Lb'
            'yziK->7b?D69Tm&2o|$U%31|SPRa75taSxNsa=Ie)LzB_GAC<gK8S5yVG^%S7iTdVALm0DdKP7E9_ARPz=_(%i$oi10~ma|f~dx)'
            '_#!5$OpPBe&TG)N84P<%%Km<|?Yy$$Oc7%9c`3}|s7VaY%U!F!*yYQvz^ie_&llkrbzQ(&FU#5~zJ#G{Rjq-c4QsNNTToT@oJJk%'
            'vbF%8J4*ptD?+r!C-`a+s5QPKy?s?#TEgIeP5G5!NWCs=uYh(Hz@?WjP#Bl@;|vA!!sj=;R=?SG2X4t)Kh%bLg1p9W@>~3M3iTS_'
            '<X8A>6!5X_Dqo|pkJjG+3n>_C{2x34QXnSEWLXDr+I>IcO|sPUCYf(&d@9NJNvI7HI68r&gR_T<<4E;psl&(-95<%Mm9ch``pDd&'
            'c+b>x_(s&*CiEU7a8S<}YM-W&GxF*L^cf*=(CL%t%sJ8uwb7n8Q9ZxGa|DhKH*ugi%0z9`xUSPm+du&h)+)G7&XBgVYK}!*4^!H-'
            ';+++>4dR>PlB_M@<|J?mE96_O+|DnnQ49D!x~xV`qkR`u+X&WH$c9Vu>WaJ@uP9yp#e1&K&%vghCvb2LdFHYvYs+Xs_0U%r2pk<?'
            '8^w3#4bn*9=zw7fH~AG=+ki2r2^_R^gs&1f=!rasxh`v00OnZ&Ctof0d|i1WNA`xYkQLw*tKaOp1Gi+Y47D)=M<;M}h0~jARhwwV'
            'TdM6AzfRy_+YxYd{tP(bpB^R?r#%tv`@v(=#qT~1t1h~;ibtpVG;K@vVMU)K=>#MPqHV#mO<=xp*ri&&TivOyGRQ!f#cV&W<*9=m'
            'd$#38GTp#WaQIEg4O#wxXZ!j0p1Kb?g6lDul+n{XT+Oo<-xJJ=@~=OxXNx5NW<;Z`b{l4h{Jgc{24Qq)jQsGFe?3$^<aey2_V#2j'
            'KQ(umO7%Owho9)8!|yutJvqfCuHlDdnOT(6+55L2nOk=s{^rANZr<B^cz64~+js6hz$|W)^06>(qkBRYw{w#N7ndhLvjj&RSu7x|'
            'LN1cNr1B?`v;#=lz}l|w<ob5L0;{QPg)zg8z^dcb5Zd3PGPI|CS2MI4w~BDyfYt2&x?j_r+1-DF*nNP1{)K;@!JpW9^QrUJmh*Oc'
            '@c;O9dhP19<9^q0<U^|S&J%E<mOVdt`#GP<wtn~u>U;~?+O7p_mJgp#;o<XrU(r$w=(#R|b4HwsGcJGMFe_b%-uvn9-K~_M53X}}'
            '6iVp{xYH4A%<R54l+Kzq{gfmy9bwrZdNW-1Gc#P)mErC-!6sSR^`XfB4nunrV)VimI6)giC#VN=n0q649X7J(G~&?ezX45>csE2N'
            '000'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    def __repr__(self) -> str:
        return 'uavcan.node.GetTransportStatistics.0.1()'


    _FIXED_PORT_ID_ = 434
    _MODEL_: _pydsdl_.ServiceType = _dsdl_.CompositeObject._restore_constant_(
        'ABzY8W}=N@0{`urTW{RP6@a-~Nv2n_th;1Mu_y9Paio>wOJd7uQrER>V``a|9mho*5ZvXgNM)DY@*+_IQY0uE*Z_ep5Ecmf3-a8D'
        'B9DE{PsmTmV;}R_b2w+H-HnwvLHlL{)|uhVoH=u5zQf_nelqy?8)vorUwW#&Z-;iXYK9_kt)}~tRcnf>S@&CQKXfCJr6UhTu<O>v'
        'qy4tXKF?nJH2XMPNspO<_){#x$c*s0qov0lMnPPU;-IhQkm*@1&~qWScI%c`^?X}Ye<Pwtf#rp5KZqViR^*0}TMw&SQfHRx=B@}r'
        '*Y{BKk;jz&JmVTKeU^O+R+&~51#T^lM3{Y$rBhvbv$ik${21%mq8*636$v|gmX4VXHxagp{hF?wZKe}u=*K}_KtWTOZ7XuJbbsCP'
        'TVg#1pR70hK)Bo9y0m`xjWyS6G~>jst?dQipJ2Tm*P3n}+_4=uu@}>}A}jYwNR8HU$m>@wUpZ{p7prenWmO!AV})QxAiM}C1zn##'
        'O$SZeuV?AAEdd_(LT0g0M9gonZQ+T)YO<!kx7HN9qRArF0}E9bP+s?A56lg#6`W5<FzA8_51t3swy+tvj(L8>a9-U29z;G1tya4!'
        'SmX$XqheO%w@_PiznXzbwPu*5=hO<Sxsllv-ge}G-BEu&OGkg@M!(JT4<SqIBQ2YLJ4@MNO2YkC%?JO2WA2NV59>36mGGbqV~+gb'
        'V3iG<b;oVmnR7ZlZdkVMdfVTt<g8%nX54IA!G3=!XxO!yvB>_Gt#GXq)?f{`rJ{`MaSevsay?jpn6MH|95GwI4U>+oE2c==;CEc6'
        'n{h3yL5ne16fhB9C=MX`wP?C6ST}YrB*Uib!8~Tp5i+%szWzeINd1{J>Wn)RAAqJqfG+6B(xE%908bTtR}NNecmMO<{oi|V&?|N}'
        'ra;U)b#7CuyN7k(4sg`&E_6Tj9(ZZn6ZSn=kJ}>Xb;L;53dlGbSGOR@fTO{<-=(vLQiRQ_x1j7k7C~ev{WaUl(rFVGy=Pm2-L2?Z'
        'T!RsfcyY@V&>UldvyiSnf^`kgY9c_A!nj@+Vc3B6vCpU)01`oWBCKYhq8O(0kW!ENiu1nn2j`Enhf(YSqKyCp^DfqYpbJ&+C-xyn'
        '5d;vI@-F^y*WY6;%LAM7VaOb7S1`X`j{~Stt)K-WvFZ`CMZ@)6<Ogk8&Z{po@D_7G1wg)^#{?NE>^$uv|1B^u$8IgxAnesj>@{H='
        'ENqLq+mI1~Q6cj|Q?TcT0>>kqDICKG&I70Jn2zg+*qM3e%x*e!>4*Q1Fx$OSy929p;+eDXWTm8OH<?-@Ju%d+GuLa!(YhZ;Af6jM'
        '!AVx6LM{wBbo{t!=V8-_nA(6KT&>(|Ky<!xaShg=YRKFWl-GmYl{n*2d7ri1W)s|0_dR=+LFGNj7kZ#R`}5_iY+qOyv{9*dP?%3|'
        'xSB`iJZ#Cvdx6!?D`D{dNCbYhlFxr$CG0l0CSd*H@b@5W$_S6{Lqmhu^C0R~GiS*;m9If(**RN;&<jQCY*$#Fx#fHKlJ%Y&pVOl<'
        'Ji|*Z!+7z-+V*6pA01Y+D$C!%NWB7)+PTb2fW{Tz<SP7s6KZi?hH+jZIY6?Evee;&lpi8FjB>EUkDwgt@S~KkQ27YTBON|U&ySIw'
        'F_fbnejH_`!^ctT9X^3_xWgx@{uIiA4xc7{GbpDzd=}+ohtHv$=<s=z;~jni<?#+*KsnaoizttE_!9N^3d)fVKS}+bLV2{q8TJ1v'
        '*}F`3oThP|A$!iEEO+=hvg<sJXNBy0O*)rfAo)7URg!BYt0dP+UL;AA!!MD%O!5lJt0dnf`4-7*B(Ia)AbEr2+a!NM@*R@zlKdsf'
        'yCk2GbVw#7pOXB7<d-DBBKbARZ%BSi@;fQ->m^FetHg>*TvLg=D)B@m9F<5^;;Bk}p%P!J#8)cuwMu-W65p!Cca(@7avX5bkB116'
        '4FlLPUVx2(L)aJ~Hp;|?-p59n*wBfM0b-*<Yzz?_8nH1-Z0N+sU>_S3#Ksu0F+yzU#KsV@F+glA5F7Kv#w@WhO>9gO8{@>r7_l)*'
        'Y*dI1o!A&AHU^1}fj&0Q6C3A<jkCnY8Dir!v9U~Syh>~^V&fFCagx}0h1ggkHWrDE1!Cg_u`y3<%n=*2#KsJ<F->et5gU`l#ssl3'
        'PHgDJhCyr?#D+m^7{rD_Y#79bL2MYrhCyr?#D<~RFccexV#82u7>W%;v0*4S48?|_*f10uhGN4|Y#53SL$P5fHVnmvq1Z5x4fUpY'
        'NyAGTUefUVH$?($Brm{*b_g39u~8y6%6)89hz*U{C=(kxv7z<tqDsWZD6uiz$HsADqe5&95gQt@F->fY6C0z%hE8k@5*r$^u}Eyp'
        '6B{$c#w4+EoY)v8HjWY-!^B3pkBxK0#u;K`nb=^&#z|shiP%^mHs*<qSz=?F*q9_X#)*wFVq=ups1O@Eu`x_+3=$gy#D+#}+#ohK'
        'h>h#S#x-K&BC)}Ujd5Z_BQ_FZBOx{tVk03o5@I7EHWFeZQEViNjYP4LC^izsMxxkA6dQ?RBT;N5ij73EktjA2#YUpoNE921Vk1#('
        'B=Sw6$1iDkNyAGTI`TNvsiaf+(Q-osX4rKaxRCzqy_=73-P~lVn8D|N!w*`PR~HB8DB(sW>NySTYZdk$kA=dER-b=jwwfPWH7vKO'
        '4!Bw(a(p{Pt@*K*Ja}=v?H@SB>OF2t7Y{i&4FYRFOXnV2@D!fN6YQJ#wEsp#$WG`a^&TF2SZ%BBM*A5rr<3YjyMf2ARO#T1PnTzW'
        'Pr;_=9=miOigdrXbvyv+K8cyzvb=4vCE6l#4?8RWP#$5Ip+P&3a+-4$7SjJ9%xS#D2a0X6#>)s?Pr%doQC>kDd%_+*&FhZIoDNzl'
        'eIZaQf?(0hq|A+C%PE<jl)0XuD7CB5h}tU{K;~qw!iTV|Crskg>EZxJ<Kui7L(ihj%|jnYDR82;@nWNmxj_s*Jwa6CQ+yFOsZ6yW'
        'FAizYwiyh2%gX)%wC%LA;$#tG^L{DJVyj6E&gXhYeZI$+J%Lx_jGr#TFX}pjy}mAUC-^dkvQ;$(hBmCpTy8;C*|UT?)@5!1Ja>u$'
        'v{r;@jZg5^B2a65MSA<Pvb2oB|BCV}!;pGa<}QGC6~LvJ&rleb^Kp`bdExWxJ)_^~nSmQJHvqZez96sh>-+|Pi$cA|H~1y~CIx&f'
        'yUf=p?4$M9z(NX!8vhSZfE0*{a<i-hIPKEU_>wI5eM#mE8sAFtdlGU(1ddMN=-}+(;tW!KS?bVo1lx_Nb`{JWr#f=)P<&_VIea7P'
        'YZGdZ5jd!447E>F%NhA}0_uzqIOz0Abmkmsh1{{eFHt?8;5h<Ehe;eP&M#5hG>&UYX&WrS!Q3b=lar+Fl<H#<$HSC1t@vg|ZA18_'
        'xGZxExHt)%!V38nE0^<G)oKC1N6)EN(`es$RW^dT6|&(q`E*6j#s#Hop!m+!`Kz#K=LsAfL%wraleu$fLG{2_X9ye}U^|B2%oj-`'
        'fujS4WnAQ!WbPugSt4-I(h<H&;Gie+J<L^^y96-L5;*y2vF2OK6FIWil!dGSrx^W4&kWp<xeDaQ2ppZj(G^bbs8Ma874NFD8~iGP'
        'gJoUd==?k2gnx3dnOO2fwC4vOnl9duG_1Pl-Bmm}QPQ+cS%(#My0#OrIS_3N-faT+8wXXYmD|<r>MDaB2(y^&$F+RxV8@<qdC|f3'
        'INqMPcnuD(a<-S>jMRPDBe))eP8q$;!_|D(;(LNwQGQS2dbUXN+ZAeMwcF4`<maUgHwdExW8@W0ekG=A$Qz$-d;4}UFS>WRmFl;A'
        '4==N#gFEiKeS3=Ea}6&><<6p#&fdTI#N537==}#<+`PB>==Ro~o40O1#9iD5?Z?8njqV9q+|Er7TpXUf>JGXbSqvbo!d@hOMeUzN'
        '(hgwD2G;i6`|4Zy2&|^E71|ta1XdlNhERTo(omk3E@x;pE){u$xZ@0HnsaAoq^xN>JCNR)!PIg1Q(P!I^UjH<Fc9r0++6+GT~qt}'
        'AA-)c&A7IcfDQ5$@Cm#EzAY6cMT5TQa@jjKi>rDVO+FAD!%rUM&S`j<9sy@Zur{*$+Hg8++Vtasz;uLVgXrI6vY)xhWIdbAoxgx-'
        'GPCm;B>BIc@9#;`1)JajZ5TbE-i=}IirjBl$evS3;bHm5fBtartB0;za~;|qq2DHD<foo%^|zsd9uz;EP&H@<-b05!#6M5)&*Q@N'
        '_y1Xv&VS}CIE!(u`d=o_!4gI#000'
    )
    assert isinstance(_MODEL_, _pydsdl_.ServiceType)
