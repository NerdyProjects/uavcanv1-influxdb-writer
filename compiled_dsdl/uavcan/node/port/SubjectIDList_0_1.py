# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/user/foreign/uavcanv1-influxdb-writer/public_regulated_data_types/uavcan/node/port/SubjectIDList.0.1.uavcan
#
# Generated at:  2021-11-11 23:08:22.926586 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     uavcan.node.port.SubjectIDList
# Version:       0.1
#
# pylint: skip-file

from __future__ import annotations
import numpy as _np_
import typing as _ty_
import pydsdl as _pydsdl_
import pyuavcan.dsdl as _dsdl_
import uavcan.node.port
import uavcan.primitive


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class SubjectIDList_0_1(_dsdl_.CompositeObject):
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    CAPACITY: int = 8192

    def __init__(self, *,
                 mask:        _ty_.Optional[_ty_.Union[_np_.ndarray, _ty_.List[bool]]] = None,
                 sparse_list: _ty_.Optional[_ty_.Union[_np_.ndarray, _ty_.List[uavcan.node.port.SubjectID_1_0]]] = None,
                 total:       _ty_.Optional[uavcan.primitive.Empty_1_0] = None) -> None:
        """
        uavcan.node.port.SubjectIDList.0.1
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        If no parameters are provided, the first field will be default-initialized and selected.
        If one parameter is provided, it will be used to initialize and select the field under the same name.
        If more than one parameter is provided, a ValueError will be raised.
        :param mask:        saturated bool[8192] mask
        :param sparse_list: uavcan.node.port.SubjectID.1.0[<=255] sparse_list
        :param total:       uavcan.primitive.Empty.1.0 total
        """
        self._mask:        _ty_.Optional[_np_.ndarray] = None
        self._sparse_list: _ty_.Optional[_np_.ndarray] = None
        self._total:       _ty_.Optional[uavcan.primitive.Empty_1_0] = None
        _init_cnt_: int = 0

        if mask is not None:
            _init_cnt_ += 1
            self.mask = mask

        if sparse_list is not None:
            _init_cnt_ += 1
            self.sparse_list = sparse_list

        if total is not None:
            _init_cnt_ += 1
            self.total = total

        if _init_cnt_ == 0:
            self.mask = _np_.zeros(8192, bool)  # Default initialization
        elif _init_cnt_ == 1:
            pass  # A value is already assigned, nothing to do
        else:
            raise ValueError(f'Union cannot hold values of more than one field')

    @property
    def mask(self) -> _ty_.Optional[_np_.ndarray]:
        """
        saturated bool[8192] mask
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._mask

    @mask.setter
    def mask(self, x: _ty_.Union[_np_.ndarray, _ty_.List[bool]]) -> None:
        if isinstance(x, _np_.ndarray) and x.dtype == bool and x.ndim == 1 and x.size == 8192:
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._mask = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, bool).flatten()
            if not x.size == 8192:  # Length cannot be checked before casting and flattening
                raise ValueError(f'mask: invalid array length: not {x.size} == 8192')
            self._mask = x
        assert isinstance(self._mask, _np_.ndarray)
        assert self._mask.dtype == bool
        assert self._mask.ndim == 1
        assert len(self._mask) == 8192
        self._sparse_list = None
        self._total = None

    @property
    def sparse_list(self) -> _ty_.Optional[_np_.ndarray]:
        """
        uavcan.node.port.SubjectID.1.0[<=255] sparse_list
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._sparse_list

    @sparse_list.setter
    def sparse_list(self, x: _ty_.Union[_np_.ndarray, _ty_.List[uavcan.node.port.SubjectID_1_0]]) -> None:
        if isinstance(x, _np_.ndarray) and x.dtype == object and x.ndim == 1 and x.size <= 255:
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._sparse_list = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, object).flatten()
            if not x.size <= 255:  # Length cannot be checked before casting and flattening
                raise ValueError(f'sparse_list: invalid array length: not {x.size} <= 255')
            self._sparse_list = x
        assert isinstance(self._sparse_list, _np_.ndarray)
        assert self._sparse_list.dtype == object
        assert self._sparse_list.ndim == 1
        assert len(self._sparse_list) <= 255
        self._mask = None
        self._total = None

    @property
    def total(self) -> _ty_.Optional[uavcan.primitive.Empty_1_0]:
        """
        uavcan.primitive.Empty.1.0 total
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._total

    @total.setter
    def total(self, x: uavcan.primitive.Empty_1_0) -> None:
        if isinstance(x, uavcan.primitive.Empty_1_0):
            self._total = x
        else:
            raise ValueError(f'total: expected uavcan.primitive.Empty_1_0 got {type(x).__name__}')
        self._mask = None
        self._sparse_list = None

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: SubjectIDList_0_1._SerializerTypeVar_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        if self.mask is not None:  # Union tag 0
            _ser_.add_aligned_u8(0)
            assert len(self.mask) == 8192, 'self.mask: saturated bool[8192]'
            _ser_.add_aligned_array_of_bits(self.mask)
        elif self.sparse_list is not None:  # Union tag 1
            _ser_.add_aligned_u8(1)
            _ser_.pad_to_alignment(8)
            # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
            assert len(self.sparse_list) <= 255, 'self.sparse_list: uavcan.node.port.SubjectID.1.0[<=255]'
            _ser_.add_aligned_u8(len(self.sparse_list))
            for _elem0_ in self.sparse_list:
                _ser_.pad_to_alignment(8)
                _elem0_._serialize_(_ser_)
                assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
        elif self.total is not None:  # Union tag 2
            _ser_.add_aligned_u8(2)
            _ser_.pad_to_alignment(8)
            self.total._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        else:
            raise RuntimeError('Malformed union uavcan.node.port.SubjectIDList.0.1')
        _ser_.pad_to_alignment(8)
        assert 8 <= (_ser_.current_bit_length - _base_offset_) <= 8200, \
            'Bad serialization of uavcan.node.port.SubjectIDList.0.1'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: SubjectIDList_0_1._DeserializerTypeVar_) -> SubjectIDList_0_1:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        _tag0_ = _des_.fetch_aligned_u8()
        if _tag0_ == 0:
            _uni0_ = _des_.fetch_aligned_array_of_bits(8192)
            assert len(_uni0_) == 8192, 'saturated bool[8192]'
            self = SubjectIDList_0_1(mask=_uni0_)
        elif _tag0_ == 1:
            _des_.pad_to_alignment(8)
            # Length field byte-aligned: True; all elements byte-aligned: True.
            _len0_ = _des_.fetch_aligned_u8()
            assert _len0_ >= 0
            if _len0_ > 255:
                raise _des_.FormatError(f'Variable array length prefix {_len0_} > 255')
            _uni1_ = _np_.empty(_len0_, object)
            for _i0_ in range(_len0_):
                _des_.pad_to_alignment(8)
                _e0_ = uavcan.node.port.SubjectID_1_0._deserialize_(_des_)
                assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
                _uni1_[_i0_] = _e0_
            assert len(_uni1_) <= 255, 'uavcan.node.port.SubjectID.1.0[<=255]'
            _des_.pad_to_alignment(8)
            self = SubjectIDList_0_1(sparse_list=_uni1_)
        elif _tag0_ == 2:
            _des_.pad_to_alignment(8)
            _uni2_ = uavcan.primitive.Empty_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = SubjectIDList_0_1(total=_uni2_)
        else:
            raise _des_.FormatError(f'uavcan.node.port.SubjectIDList.0.1: Union tag value {_tag0_} is invalid')
        _des_.pad_to_alignment(8)
        assert 8 <= (_des_.consumed_bit_length - _base_offset_) <= 8200, \
            'Bad deserialization of uavcan.node.port.SubjectIDList.0.1'
        assert isinstance(self, SubjectIDList_0_1)
        return self

    def __repr__(self) -> str:
        _o_0_ = '(MALFORMED UNION)'
        if self.mask is not None:
            _o_0_ = 'mask=%s' % _np_.array2string(self.mask, separator=',', edgeitems=10, threshold=1024, max_line_width=10240000)
        if self.sparse_list is not None:
            _o_0_ = 'sparse_list=%s' % _np_.array2string(self.sparse_list, separator=',', edgeitems=10, threshold=1024, max_line_width=10240000)
        if self.total is not None:
            _o_0_ = 'total=%s' % self.total
        return f'uavcan.node.port.SubjectIDList.0.1({_o_0_})'

    _EXTENT_BYTES_ = 4097

    _MODEL_: _pydsdl_.DelimitedType = _dsdl_.CompositeObject._restore_constant_(
        'ABzY8W}=N@0{^v`-)|I0635G6!(wAFI2iH^I=>C^?#ASj1Cl$={IKK<%OP+gPN%z3?@sS_o7tJk^o;FI6os605tdrYO3eLTks?LP'
        'W2C%9dCF6ix1@TeyuY$b?%@szzO&O^Jw4S`pQ_>E^nb(&$p4sgQODDsUvagF75CLgyzYyN+X&lHs8u2|Gk-()s*RW4W+xKa<Lvxr'
        '*(ceuIpnG!5OF5K9C<%bVK6*A;|9Eq=4VsB-QYnb2t84W!Z@kiOY2*rk!;+!rF4>+lDjQpjrMk>!ynM~<IDkP>htWg%*?qwNn%w`'
        '6QQ$z;L;QJ+?$n|nRO+6ufLgD*W(Fy6T3t6>;&^T=AFzuwXSxBcS{7VM6TIe!>={(3SYEEkkDci_7cU`WojE|%v}pZU+@w4%(-=y'
        'xPJba%$dR+Hn>jQHhL+O=giWb{ROO9<vNbl?2vWKzq7lzO;;y8@ObPEF0_}{%@JHF;tiE_vKlZm?bdyrnOFDs*`JMDPDX!c=IAw*'
        '6mNeIf6{)<K{t#t!zL}FJMDVtt43xPYoZ;Z7ZN<gzeXbFNf-~tOhYO>82P3-c~?XtQRC+wa39#s%S$-%`0dp9dE6PDg^O)-KNZ;*'
        '*|Ia$)pdOLX}7HcdhIsf&94qyr=~tf6KBfKg|0?-i`|F^d8pk^>(*G#n&~#z4>Gj%LVT6`n^G_pcw(2uB8r8^Q`ao9H$A*mO(kNM'
        'Z=u3A<5aM6nbEXrs)bi!>)hA*ZC)?#2KoIAA9kvEQ+Y-{ZBBo{F?KL+CPke*i>WbxFNxDelEz|qY}Pz8ImI%0R33At9I%-rPhj>8'
        'Jo%hid>>uV3WT>2B%&qa;gw%@=H)B$yu7fNduOI_w{#5HH&`^K>tSG{FzK6|k^dZTe6Y55A5CRlUNg_{hY_9u`pX`|P{x$*=HbKr'
        '{dLjiNHgXQdlzH5v`*JJZl*7-US7>?PS`^fW^sTPZoN}b$Zm+sze^=WimB(><7{w5TDE77xlNn#u63NNyzI6);p#Ar8v+M>;YJ)2'
        '%e1R9Yzup?akUx70=-r(+`he9RzcHGcfERfCq_=j)hMlFGPtp5Vcg+U`t;FcRJCVSwU4a!&Z@Fnd81McV;;GZYkYQWQG*ZNRt=Hu'
        'q3<uz{4yFa8=)}|T0%3N$vn|ic$lo-$-`7fqJdG`$h}#~<ch2o?z|}9qEpHf><;%l6|{bnhB$ha{BQGS9&-$79Tl@Pr-TQ4!&#6w'
        '@$dR4HVKRDat@FlEHcxXrr$I4`;gV?u5;Mxfv!`c@gr6bcb!?Qhq}(3)tRnyl;+P{J=k@Qk==1xZ-MMjSY7BkCrKAcpCUa)x<q=K'
        '^bG0Kq|cB(OZpt?^Q31<&yh0H7f4?ueTnpC(pN}dC4G%_ne;sA1=80^S4hjG71Ao{8>FkG7fIhF{R8P+q;He{k@OPjWzs98?~uMr'
        '`X|yqlU^nLOQEUUpo@a1uRFh(llx_&X$x{uGY1e+LPWggOxf&}7apO_gb+Q2q_O!LjIArS<k_-<xnlc+p`a~c&<-ti`mW8FCl#MV'
        '?t{E|IKQC5r+JWryjlD4xQ+7tVAXO1>xR&Fw1lHSj~S(^GN&<(wQzmg?qCM<HD)ha*c>P%wy^MoVeYfKV75$P>CuVco}Fj2+14he'
        'nyeibw!?*}0KnJ+v)L;YOH?R&tgYN^N7yHf773Z6`*!x^?rqsI>VHhW-ovZ;!w0D+Ki<nr#MmhK*H|clJ>N&fB0MJiJDEi=!Xh9R'
        '0kH^1SOml(AQl0!2#7^MECON?jIaoZML;Y9Vi6FFfLH{?A|Mt4u?UDoKr8}c5fF=jSOml(AQl0!2#7^MECON?5Q~6V1jHgB76Gvc'
        'h($mw0%8#mi-1@J#3CRT0kH^(ML;Y9Vi6FFfLH{?A|Mt4u?UDoKr8}c5fF=jSOml(AQr(si=f-f!kHvYu%p2IyRuePM($&}>Ac0u'
        'Yh=(Wa*+G}ZxTxdHYfAM^2W3}3q`B*D1TDv`r4hf>l>SYqkc#F6tD8byj!{0?^bN0Ez9@hlKfuQwysVA$RD<DqHL|<KWQ%qKm7l9'
        'ANFGmGjVk&7w=!jZS--ai^+rDsm%6zkbxQ4oG_&sw(Tvk!gPqvv+m_AZ?(!=eIyuuL*z)?2~*!gx;+r+el)ThWu9tc<C6LbOF|~`'
        'L&wMEgIVkr^Ukc?u$^bj^KM6XkdtkV-B8G|H?bXMevm6{M_@x9ZsT@YvJ*0~izY0L@;34c?nbM2gbQy|`&}+-RsOmwv-nUuWiV3m'
        '@St!JL~Mayubq+i-j5b@+)a4v3AOLbCse&Y@A~(?E~b6+yH##J{~{l)ZH3|6@+<jMQMqhg!_O=v=14g!^>6m*I&#0rD>;Y7W1;x6'
        'SdujiUmLmqZD4QRvLiOqwrY5V-)eY97+YDb^w2C}pI-dWL+nZ{geapvWWVFXN&aHP{`!`#zN<|wjMSG>{$WY3Dm|Rk0x%q1emK4b'
        'sQd~q(VIVT5dZ)'
    )
    assert isinstance(_MODEL_, _pydsdl_.DelimitedType)
