# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/user/foreign/uavcanv1-influxdb-writer/public_regulated_data_types/uavcan/node/430.GetInfo.1.0.uavcan
#
# Generated at:  2021-11-11 23:08:22.881482 UTC
# Is deprecated: no
# Fixed port ID: 430
# Full name:     uavcan.node.GetInfo
# Version:       1.0
#
# pylint: skip-file

from __future__ import annotations
import numpy as _np_
import typing as _ty_
import pydsdl as _pydsdl_
import pyuavcan.dsdl as _dsdl_
import uavcan.node


# noinspection PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class GetInfo_1_0(_dsdl_.FixedPortServiceObject):
    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Request(_dsdl_.CompositeObject):
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self) -> None:
            """
            uavcan.node.GetInfo.Request.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            """
            pass

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: GetInfo_1_0.Request._SerializerTypeVar_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.pad_to_alignment(8)
            assert 0 <= (_ser_.current_bit_length - _base_offset_) <= 0, \
                'Bad serialization of uavcan.node.GetInfo.Request.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: GetInfo_1_0.Request._DeserializerTypeVar_) -> GetInfo_1_0.Request:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            self = GetInfo_1_0.Request(
                    )
            _des_.pad_to_alignment(8)
            assert 0 <= (_des_.consumed_bit_length - _base_offset_) <= 0, \
                'Bad deserialization of uavcan.node.GetInfo.Request.1.0'
            assert isinstance(self, GetInfo_1_0.Request)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
            ])
            return f'uavcan.node.GetInfo.Request.1.0({_o_0_})'

        _FIXED_PORT_ID_ = 430
        _EXTENT_BYTES_ = 0

        _MODEL_: _pydsdl_.StructureType = _dsdl_.CompositeObject._restore_constant_(
            'ABzY8W}=N@0{?YV%W4!s6dg%4VSFJj1#J){S)@Bbcdm4ygwauqxRau)>&{e3byZuB$&3&%8&N1w$n`V)M{muH4<h!e?(5upPM?pP'
            '-yd!amS4WpFJzFWW&ynBMt|VKK+Rg$^)BcLn6Dm1pW2u_yk7KxXSjQcC%BU@GRr%v-%5Pea$8#`p?(VS&`w<a3f?CO5%V^ife+eQ'
            'RD-<rX8k_H(S_0A6P{we%y^7mixeT?Tg*5AikVofmYkG63B8AwN09g>Ut<$J2g!QpBhwPc`34Iv`4*^Pfb~2o%<mfII%pD+YbMTv'
            'p4w)0?(ASs+lfhYDfW&%5%o=<gwZYYFioaxVUkDAB9RX3p{8(b9^Bvm&GVq%uUEBlx#EEqd$6&{InyoR=e)_JYcc<Ll8mVeKt+pP'
            '<yQ*T!$*{MlPW5p9La1!E<1e3BWYCy#i>I;6(S|tYA4xNaXSUMTOBLnx*S~rhsq~wwVl?(!&pM4r^+k{n0{ynRuXn}RY-l&jRvV@'
            'eQ8Cj`1-<7Bb_Zwz<lqQKZK6VfSpD~+~WBd^OeUsK3m2|6s}#8H<;@&SN{VEi%vKaoy2<%og?=Z$}f8GJUai!YnNC{OeLz@`T9#P'
            'B{BS`N!=~gF{#Y`;(V15X51veuedWBd<%k%*{^_bw4DUe?X<<wpgj1zJhoWpBsrl>4;jpRZkOI2ClN#v^-o)<Yr{qZ000'
        )
        assert isinstance(_MODEL_, _pydsdl_.StructureType)

    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Response(_dsdl_.CompositeObject):
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     protocol_version:            _ty_.Optional[uavcan.node.Version_1_0] = None,
                     hardware_version:            _ty_.Optional[uavcan.node.Version_1_0] = None,
                     software_version:            _ty_.Optional[uavcan.node.Version_1_0] = None,
                     software_vcs_revision_id:    _ty_.Optional[_ty_.Union[int, _np_.uint64]] = None,
                     unique_id:                   _ty_.Optional[_ty_.Union[_np_.ndarray, _ty_.List[int], bytes, bytearray]] = None,
                     name:                        _ty_.Optional[_ty_.Union[_np_.ndarray, _ty_.List[int], bytes, bytearray, str]] = None,
                     software_image_crc:          _ty_.Optional[_ty_.Union[_np_.ndarray, _ty_.List[int]]] = None,
                     certificate_of_authenticity: _ty_.Optional[_ty_.Union[_np_.ndarray, _ty_.List[int], bytes, bytearray, str]] = None) -> None:
            """
            uavcan.node.GetInfo.Response.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param protocol_version:            uavcan.node.Version.1.0 protocol_version
            :param hardware_version:            uavcan.node.Version.1.0 hardware_version
            :param software_version:            uavcan.node.Version.1.0 software_version
            :param software_vcs_revision_id:    saturated uint64 software_vcs_revision_id
            :param unique_id:                   saturated uint8[16] unique_id
            :param name:                        saturated uint8[<=50] name
            :param software_image_crc:          saturated uint64[<=1] software_image_crc
            :param certificate_of_authenticity: saturated uint8[<=222] certificate_of_authenticity
            """
            self._protocol_version:            uavcan.node.Version_1_0
            self._hardware_version:            uavcan.node.Version_1_0
            self._software_version:            uavcan.node.Version_1_0
            self._software_vcs_revision_id:    int
            self._unique_id:                   _np_.ndarray
            self._name:                        _np_.ndarray
            self._software_image_crc:          _np_.ndarray
            self._certificate_of_authenticity: _np_.ndarray

            if protocol_version is None:
                self.protocol_version = uavcan.node.Version_1_0()
            elif isinstance(protocol_version, uavcan.node.Version_1_0):
                self.protocol_version = protocol_version
            else:
                raise ValueError(f'protocol_version: expected uavcan.node.Version_1_0 '
                                 f'got {type(protocol_version).__name__}')

            if hardware_version is None:
                self.hardware_version = uavcan.node.Version_1_0()
            elif isinstance(hardware_version, uavcan.node.Version_1_0):
                self.hardware_version = hardware_version
            else:
                raise ValueError(f'hardware_version: expected uavcan.node.Version_1_0 '
                                 f'got {type(hardware_version).__name__}')

            if software_version is None:
                self.software_version = uavcan.node.Version_1_0()
            elif isinstance(software_version, uavcan.node.Version_1_0):
                self.software_version = software_version
            else:
                raise ValueError(f'software_version: expected uavcan.node.Version_1_0 '
                                 f'got {type(software_version).__name__}')

            self.software_vcs_revision_id = software_vcs_revision_id if software_vcs_revision_id is not None else 0

            if unique_id is None:
                self.unique_id = _np_.zeros(16, _np_.uint8)
            else:
                if isinstance(unique_id, (bytes, bytearray)) and len(unique_id) == 16:
                    # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                    # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                    self._unique_id = _np_.frombuffer(unique_id, _np_.uint8)
                elif isinstance(unique_id, _np_.ndarray) and unique_id.dtype == _np_.uint8 and unique_id.ndim == 1 and unique_id.size == 16:
                    # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                    self._unique_id = unique_id
                else:
                    # Last resort, slow construction of a new array. New memory may be allocated.
                    unique_id = _np_.array(unique_id, _np_.uint8).flatten()
                    if not unique_id.size == 16:  # Length cannot be checked before casting and flattening
                        raise ValueError(f'unique_id: invalid array length: not {unique_id.size} == 16')
                    self._unique_id = unique_id
                assert isinstance(self._unique_id, _np_.ndarray)
                assert self._unique_id.dtype == _np_.uint8
                assert self._unique_id.ndim == 1
                assert len(self._unique_id) == 16

            if name is None:
                self.name = _np_.array([], _np_.uint8)
            else:
                name = name.encode() if isinstance(name, str) else name  # Implicit string encoding
                if isinstance(name, (bytes, bytearray)) and len(name) <= 50:
                    # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                    # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                    self._name = _np_.frombuffer(name, _np_.uint8)
                elif isinstance(name, _np_.ndarray) and name.dtype == _np_.uint8 and name.ndim == 1 and name.size <= 50:
                    # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                    self._name = name
                else:
                    # Last resort, slow construction of a new array. New memory may be allocated.
                    name = _np_.array(name, _np_.uint8).flatten()
                    if not name.size <= 50:  # Length cannot be checked before casting and flattening
                        raise ValueError(f'name: invalid array length: not {name.size} <= 50')
                    self._name = name
                assert isinstance(self._name, _np_.ndarray)
                assert self._name.dtype == _np_.uint8
                assert self._name.ndim == 1
                assert len(self._name) <= 50

            if software_image_crc is None:
                self.software_image_crc = _np_.array([], _np_.uint64)
            else:
                if isinstance(software_image_crc, _np_.ndarray) and software_image_crc.dtype == _np_.uint64 and software_image_crc.ndim == 1 and software_image_crc.size <= 1:
                    # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                    self._software_image_crc = software_image_crc
                else:
                    # Last resort, slow construction of a new array. New memory may be allocated.
                    software_image_crc = _np_.array(software_image_crc, _np_.uint64).flatten()
                    if not software_image_crc.size <= 1:  # Length cannot be checked before casting and flattening
                        raise ValueError(f'software_image_crc: invalid array length: not {software_image_crc.size} <= 1')
                    self._software_image_crc = software_image_crc
                assert isinstance(self._software_image_crc, _np_.ndarray)
                assert self._software_image_crc.dtype == _np_.uint64
                assert self._software_image_crc.ndim == 1
                assert len(self._software_image_crc) <= 1

            if certificate_of_authenticity is None:
                self.certificate_of_authenticity = _np_.array([], _np_.uint8)
            else:
                certificate_of_authenticity = certificate_of_authenticity.encode() if isinstance(certificate_of_authenticity, str) else certificate_of_authenticity  # Implicit string encoding
                if isinstance(certificate_of_authenticity, (bytes, bytearray)) and len(certificate_of_authenticity) <= 222:
                    # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                    # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                    self._certificate_of_authenticity = _np_.frombuffer(certificate_of_authenticity, _np_.uint8)
                elif isinstance(certificate_of_authenticity, _np_.ndarray) and certificate_of_authenticity.dtype == _np_.uint8 and certificate_of_authenticity.ndim == 1 and certificate_of_authenticity.size <= 222:
                    # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                    self._certificate_of_authenticity = certificate_of_authenticity
                else:
                    # Last resort, slow construction of a new array. New memory may be allocated.
                    certificate_of_authenticity = _np_.array(certificate_of_authenticity, _np_.uint8).flatten()
                    if not certificate_of_authenticity.size <= 222:  # Length cannot be checked before casting and flattening
                        raise ValueError(f'certificate_of_authenticity: invalid array length: not {certificate_of_authenticity.size} <= 222')
                    self._certificate_of_authenticity = certificate_of_authenticity
                assert isinstance(self._certificate_of_authenticity, _np_.ndarray)
                assert self._certificate_of_authenticity.dtype == _np_.uint8
                assert self._certificate_of_authenticity.ndim == 1
                assert len(self._certificate_of_authenticity) <= 222

        @property
        def protocol_version(self) -> uavcan.node.Version_1_0:
            """
            uavcan.node.Version.1.0 protocol_version
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._protocol_version

        @protocol_version.setter
        def protocol_version(self, x: uavcan.node.Version_1_0) -> None:
            if isinstance(x, uavcan.node.Version_1_0):
                self._protocol_version = x
            else:
                raise ValueError(f'protocol_version: expected uavcan.node.Version_1_0 got {type(x).__name__}')

        @property
        def hardware_version(self) -> uavcan.node.Version_1_0:
            """
            uavcan.node.Version.1.0 hardware_version
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._hardware_version

        @hardware_version.setter
        def hardware_version(self, x: uavcan.node.Version_1_0) -> None:
            if isinstance(x, uavcan.node.Version_1_0):
                self._hardware_version = x
            else:
                raise ValueError(f'hardware_version: expected uavcan.node.Version_1_0 got {type(x).__name__}')

        @property
        def software_version(self) -> uavcan.node.Version_1_0:
            """
            uavcan.node.Version.1.0 software_version
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._software_version

        @software_version.setter
        def software_version(self, x: uavcan.node.Version_1_0) -> None:
            if isinstance(x, uavcan.node.Version_1_0):
                self._software_version = x
            else:
                raise ValueError(f'software_version: expected uavcan.node.Version_1_0 got {type(x).__name__}')

        @property
        def software_vcs_revision_id(self) -> int:
            """
            saturated uint64 software_vcs_revision_id
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._software_vcs_revision_id

        @software_vcs_revision_id.setter
        def software_vcs_revision_id(self, x: _ty_.Union[int, _np_.uint64]) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 18446744073709551615:
                self._software_vcs_revision_id = x
            else:
                raise ValueError(f'software_vcs_revision_id: value {x} is not in [0, 18446744073709551615]')

        @property
        def unique_id(self) -> _np_.ndarray:
            """
            saturated uint8[16] unique_id
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._unique_id

        @unique_id.setter
        def unique_id(self, x: _ty_.Union[_np_.ndarray, _ty_.List[int], bytes, bytearray]) -> None:
            if isinstance(x, (bytes, bytearray)) and len(x) == 16:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._unique_id = _np_.frombuffer(x, _np_.uint8)
            elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size == 16:
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._unique_id = x
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                x = _np_.array(x, _np_.uint8).flatten()
                if not x.size == 16:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'unique_id: invalid array length: not {x.size} == 16')
                self._unique_id = x
            assert isinstance(self._unique_id, _np_.ndarray)
            assert self._unique_id.dtype == _np_.uint8
            assert self._unique_id.ndim == 1
            assert len(self._unique_id) == 16

        @property
        def name(self) -> _np_.ndarray:
            """
            saturated uint8[<=50] name
            DSDL does not support strings natively yet. To interpret this array as a string,
            use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
            .name.tobytes().decode()
            When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._name

        @name.setter
        def name(self, x: _ty_.Union[_np_.ndarray, _ty_.List[int], bytes, bytearray, str]) -> None:
            x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
            if isinstance(x, (bytes, bytearray)) and len(x) <= 50:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._name = _np_.frombuffer(x, _np_.uint8)
            elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 50:
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._name = x
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                x = _np_.array(x, _np_.uint8).flatten()
                if not x.size <= 50:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'name: invalid array length: not {x.size} <= 50')
                self._name = x
            assert isinstance(self._name, _np_.ndarray)
            assert self._name.dtype == _np_.uint8
            assert self._name.ndim == 1
            assert len(self._name) <= 50

        @property
        def software_image_crc(self) -> _np_.ndarray:
            """
            saturated uint64[<=1] software_image_crc
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._software_image_crc

        @software_image_crc.setter
        def software_image_crc(self, x: _ty_.Union[_np_.ndarray, _ty_.List[int]]) -> None:
            if isinstance(x, _np_.ndarray) and x.dtype == _np_.uint64 and x.ndim == 1 and x.size <= 1:
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._software_image_crc = x
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                x = _np_.array(x, _np_.uint64).flatten()
                if not x.size <= 1:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'software_image_crc: invalid array length: not {x.size} <= 1')
                self._software_image_crc = x
            assert isinstance(self._software_image_crc, _np_.ndarray)
            assert self._software_image_crc.dtype == _np_.uint64
            assert self._software_image_crc.ndim == 1
            assert len(self._software_image_crc) <= 1

        @property
        def certificate_of_authenticity(self) -> _np_.ndarray:
            """
            saturated uint8[<=222] certificate_of_authenticity
            DSDL does not support strings natively yet. To interpret this array as a string,
            use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
            .certificate_of_authenticity.tobytes().decode()
            When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._certificate_of_authenticity

        @certificate_of_authenticity.setter
        def certificate_of_authenticity(self, x: _ty_.Union[_np_.ndarray, _ty_.List[int], bytes, bytearray, str]) -> None:
            x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
            if isinstance(x, (bytes, bytearray)) and len(x) <= 222:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._certificate_of_authenticity = _np_.frombuffer(x, _np_.uint8)
            elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 222:
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._certificate_of_authenticity = x
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                x = _np_.array(x, _np_.uint8).flatten()
                if not x.size <= 222:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'certificate_of_authenticity: invalid array length: not {x.size} <= 222')
                self._certificate_of_authenticity = x
            assert isinstance(self._certificate_of_authenticity, _np_.ndarray)
            assert self._certificate_of_authenticity.dtype == _np_.uint8
            assert self._certificate_of_authenticity.ndim == 1
            assert len(self._certificate_of_authenticity) <= 222

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: GetInfo_1_0.Response._SerializerTypeVar_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.pad_to_alignment(8)
            self.protocol_version._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            self.hardware_version._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            self.software_version._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.add_aligned_u64(max(min(self.software_vcs_revision_id, 18446744073709551615), 0))
            assert len(self.unique_id) == 16, 'self.unique_id: saturated uint8[16]'
            _ser_.add_aligned_array_of_standard_bit_length_primitives(self.unique_id)
            # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
            assert len(self.name) <= 50, 'self.name: saturated uint8[<=50]'
            _ser_.add_aligned_u8(len(self.name))
            _ser_.add_aligned_array_of_standard_bit_length_primitives(self.name)
            # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
            assert len(self.software_image_crc) <= 1, 'self.software_image_crc: saturated uint64[<=1]'
            _ser_.add_aligned_u8(len(self.software_image_crc))
            _ser_.add_aligned_array_of_standard_bit_length_primitives(self.software_image_crc)
            # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
            assert len(self.certificate_of_authenticity) <= 222, 'self.certificate_of_authenticity: saturated uint8[<=222]'
            _ser_.add_aligned_u8(len(self.certificate_of_authenticity))
            _ser_.add_aligned_array_of_standard_bit_length_primitives(self.certificate_of_authenticity)
            _ser_.pad_to_alignment(8)
            assert 264 <= (_ser_.current_bit_length - _base_offset_) <= 2504, \
                'Bad serialization of uavcan.node.GetInfo.Response.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: GetInfo_1_0.Response._DeserializerTypeVar_) -> GetInfo_1_0.Response:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f0_ holds the value of "protocol_version"
            _des_.pad_to_alignment(8)
            _f0_ = uavcan.node.Version_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f1_ holds the value of "hardware_version"
            _des_.pad_to_alignment(8)
            _f1_ = uavcan.node.Version_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f2_ holds the value of "software_version"
            _des_.pad_to_alignment(8)
            _f2_ = uavcan.node.Version_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f3_ holds the value of "software_vcs_revision_id"
            _f3_ = _des_.fetch_aligned_u64()
            # Temporary _f4_ holds the value of "unique_id"
            _f4_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, 16)
            assert len(_f4_) == 16, 'saturated uint8[16]'
            # Temporary _f5_ holds the value of "name"
            # Length field byte-aligned: True; all elements byte-aligned: True.
            _len0_ = _des_.fetch_aligned_u8()
            assert _len0_ >= 0
            if _len0_ > 50:
                raise _des_.FormatError(f'Variable array length prefix {_len0_} > 50')
            _f5_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len0_)
            assert len(_f5_) <= 50, 'saturated uint8[<=50]'
            # Temporary _f6_ holds the value of "software_image_crc"
            # Length field byte-aligned: True; all elements byte-aligned: True.
            _len1_ = _des_.fetch_aligned_u8()
            assert _len1_ >= 0
            if _len1_ > 1:
                raise _des_.FormatError(f'Variable array length prefix {_len1_} > 1')
            _f6_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint64, _len1_)
            assert len(_f6_) <= 1, 'saturated uint64[<=1]'
            # Temporary _f7_ holds the value of "certificate_of_authenticity"
            # Length field byte-aligned: True; all elements byte-aligned: True.
            _len2_ = _des_.fetch_aligned_u8()
            assert _len2_ >= 0
            if _len2_ > 222:
                raise _des_.FormatError(f'Variable array length prefix {_len2_} > 222')
            _f7_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len2_)
            assert len(_f7_) <= 222, 'saturated uint8[<=222]'
            self = GetInfo_1_0.Response(
                protocol_version=_f0_,
                hardware_version=_f1_,
                software_version=_f2_,
                software_vcs_revision_id=_f3_,
                unique_id=_f4_,
                name=_f5_,
                software_image_crc=_f6_,
                certificate_of_authenticity=_f7_)
            _des_.pad_to_alignment(8)
            assert 264 <= (_des_.consumed_bit_length - _base_offset_) <= 2504, \
                'Bad deserialization of uavcan.node.GetInfo.Response.1.0'
            assert isinstance(self, GetInfo_1_0.Response)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'protocol_version=%s' % self.protocol_version,
                'hardware_version=%s' % self.hardware_version,
                'software_version=%s' % self.software_version,
                'software_vcs_revision_id=%s' % self.software_vcs_revision_id,
                'unique_id=%s' % _np_.array2string(self.unique_id, separator=',', edgeitems=10, threshold=1024, max_line_width=10240000),
                'name=%s' % repr(bytes(self.name))[1:],
                'software_image_crc=%s' % _np_.array2string(self.software_image_crc, separator=',', edgeitems=10, threshold=1024, max_line_width=10240000),
                'certificate_of_authenticity=%s' % repr(bytes(self.certificate_of_authenticity))[1:],
            ])
            return f'uavcan.node.GetInfo.Response.1.0({_o_0_})'

        _FIXED_PORT_ID_ = 430
        _EXTENT_BYTES_ = 448

        _MODEL_: _pydsdl_.DelimitedType = _dsdl_.CompositeObject._restore_constant_(
            'ABzY8W}=N@0{`t?O>7)ja-Qz_(TMtS>&Fsp%XV9m?V(MMC|Q;%*<MqT)~52dv|7n_hy=-~XXcUJ^i20`PY*>J2*3@JT^c*UGVlZt'
            '5Nx2Mjyme7z3CPqC!H2L3Q2(IkOP5SQq`}zXL|UfAB)~N9sy$Yyx)5Ds$RXXU%g(+{L{UwsqkO>^~PegS*;aIP3b#U&H36Y*JQC&'
            '@#+n)=>)RV-gREqoH{;MKVNLf&bOVBUv>VrQ)uT(j_XRlW2f4?t^|Io6104oERrp`Rvnu-)UxI)mRoeasw{pcgA4AASG+8n4bN?2'
            'cD^(({ifr&)Yi5y`T5(9&_wFjonLj@J4#j%_)fVM$Y$rSvEdE4j!Sjg*-sr=t9Dr#Dpjq(Dh0%!y-g+BL+yRNoJBp`JMG<3-}WBt'
            '&wi0B3~$tP!zU3r^VsvgFWjax>&of{H;}W^Pl{wmsq6%$nsjFayCd?*SH)@ur8@TCvEOJPxD+)+)r#jZ4=4+Tk@|<u<xYElsTo*q'
            ')$*&o4K26IIGAkRn)CclJ5#E9l}<a=!PJ;@`v^b1CGz&$_Ph3IRLOC%l3lcqwaT)+uSe9S@}inRsy1f7ZlAQrTR4KMZ1}Qbp+<DR'
            'Y40x0I192`YIuH7a;lw+?LDQY*YYb8GitKbu#ms@%rV=m%VRB++OZkWmnfiPO7!!`#~gR2)>^2R$FBLPX8y58t6Xy`C11|AYSc@2'
            '>Y7~X7|qu)p0DEZ;&@S|qx4I*)x=JH=>{}M^G-!}zOjq#Z_b)c8+nvCGiFoPEjMr~CM%xl(~z22#|rT08PjuXi)JWJ6Qym2GAa&z'
            'ZcDS_dx2N+YUV7q<Xbf?SM_AmbiKf=cy2}duIU6#S(`DhIe~2kRL2S`cGOpqCa7F%cG_=6y40OXWI5>n-D&UqGbi|2`1=a}WL;{f'
            'OJ1YXHaBXdxmYiIC`XhD$hwD`N<;g31DOtR!h7tvVmoLm_WAY;m#k{lac9>QvM<=5#!u(lFP_7J;>@_~Hrd{;TEr<JW9_LadfIs5'
            'VyjlO{KYl3bESE!){>pybqXTC(k$ch&`@mQg3v0X@NhQBbnwAipoeW_KBy|xw$P|vYDMTw(?s<Zk>TH2qUjZp<MeGrwH1-){Ozh='
            'F~oES)16FrG2PAd1*QhmJxup9-N$r4(-)Z@V0w`0Fw>WqzRdI$riYlm%Jem+uQN57zQOb`(<4leGJTWjTTI_(T3|ZD^c|+}G96_)'
            '#<a-v7}Ig4$C;jB`X1AhOy6gEis=VTCzzgQdWPwTOh01!G1H$g{e<Zx(<!FYOl_tMOqZEnXL^(AZKijb-e>xd>8hfT*Z5&LdMHE>'
            '6Vby|^e`Pg*wMp6^spQ~T#p`ZMh~~6hr7|k{pjIg^svegE%YFAp<%h9=i;=o{a2wa*?$umk!+T2OBi+;|5r9N6RpooG&YkAn~C0M'
            'CfnFda%?79Hj@mSNt(?>XEV{*Oj2wn2Ahe&W@50J7;Gj6n~A|@Vz8MQY$gVqiNR)Ku$dTaCI*{{!DeExnHX#)2Ahe&W@50J7;Gj6'
            'n~A|@Vz8MQY$gVqiNR)Ku$dTaCI*{{!DeExnHX#)2Ahe&W@50J7;Gj6n~A|@Vz8MQY$gVqiNR)Ku$dTaCI*{{!DeExnHX#)2Ahe&'
            'W@50J7;Gj6n~A|@Vz8MQY$gVqiNR)Ku$dT<nHZ6o7?GJ6k(n5gnHZ6o7?GJ6k(n5gnHZ6o7?GJ6k(n5gnHZ6o7?GJ6k(n4PE&C7r'
            'P`0m%d~0A018W#q16o6~9HIat+SYcVSh2l8``s_jetGWf#qPE@+A%xzMordn$Bf%){2AB|?SZRu)GT|r?On5XzKHwdz%$Fztk{-2'
            'i?y!dCQ*j_W2$FjeZS?pxX&vlfy+z8pN)v;8t&?Q_#?p5U##iP1bxM(f3KxdG?JKeM4x^=+`1wpz#V+JcYh+rLIhCpe1t!N8L<>M'
            'tQy0H5KR!$sG3$_Qc~d5WpmV&3l-T2upKjEb1cLe)C*=iF7;fohY%5BuL0qeR;@}6;)b4t_qFuBW^w4kOoBQ2%a+q<5Z{D1ES|Bk'
            'iq#-&iqqi*HP5O_e>AMt{T+3n*bOry#)hIXd8#kRMc7%Z(U2Mq1Qnt5kmWGf581HX#SbaL^?J)t&WzV`tD}nho<T)YDsF^RCwp<~'
            'aCd4eO~i)t4)I5b6E*ce&c>5~7%cEnPn(O)K-SH|m*=jGm{D=lZPm*-a8yl%iFVO^8m%1q6sySvixhuUDf|q*WH1qUQVR%ft2kDl'
            '2S)Q8ij+{NIqMKStRuD$dyeE<Y59ayhoZs7oEC?!bmv@&H3)l1N~`_K25&-q-&*Xn_kT**TtUaPl$3lKv8yDN4fA`E^<EJWnnO*h'
            'IKg5E-Q~yjq}p1ZOCZ9%mt{i+&iV*bFMUN-FRa;>hHiKX-SE;TZuoK7t=|pneb{YVA9mZ(=Z5orZg@MpVV&LZ?mq0Mvm4&aZg^K8'
            'c1yDx9%eVZzt0Wt?89yucEc%l!>_U%ewp3yL3YFY*$wYuH@utO@Qyz0mSs1rvm1Vg-Ee{3@LTMLkFpy+%x>6ZH~bpA;X~|(UuHKv'
            '%x?GqyW#!phWGZl;oa<pcd{EE>ceh1cEcHV!#ca+ROFVHx^8KE%XNO)lFG`bf5!{CN*udz-Yk4^;rvLr_?X8}OpKM$x@sP+uec^k'
            'w?cM|OEBiwoUbIVw93?HYhF2gaibbCQDH-4SIhgnbgQ1vi@9{0EuWhS)Z3r3Rd#A<4P?R=+H|d^mKL@8x|mK&qFOzWy>4&hAmwb$'
            'nRUwetL9xR4pBZPSLKZ3hJLi7xQSg0au|eOl$T9c;yTx}Tos4TBA04qb<|5J%bdq`ph|r|S64yezy(OHX;wWPTyim*`xYmteeg>Q'
            'S0Zd~qh)9AIu=`Zt(p60%n>Krd!rXw;rhDn;xr;OdLOF1!@7&oFI3X!^a`qf;YqAr2QQN-H(S7RrLWYxrV|@2Vkx@}E7~TjSW0MX'
            'R<bZnq{$L;>bD+)i#ShY$zl>KTp~|wi{Dm-^)V${`PP&Z+sPVts=Ry*Ox7(Yc8~?{PPB`uJ9*XIu#VV8D}cd$@S3`5Y4Jh~eG)xk'
            'P6UM>TVL#<b!fjTo5B2@F>HFGx?&%#X9w2h0dx2BTK~jti5F>|9F8O%LA0l;FAmb0`|^f7VTs7cJaxO`C0f@HCFF&<!|bD;sXg%u'
            '`Ha^#<rhmGV!!vyeTY}dN13r~iR(AMbBp42@_>g`JLYEmQ}0KfOMl`G^1er-K6~bYr1a)<>q8tNZ~xX~X9jDSSo$dMES_86;!WCh'
            '6ryqRoQ*v9KE&I!%X#OC$B8uxyi0oSe29^F=cVTMD7IPXo!_x7>sP!hMtPU_#B#t|qr4;BGM>bkDDrMo=|Mqh!tpKdRU8xJysv#K'
            'iD1of-Un|vf8w|}!F%nb#*AXy<B`_9|9p8#auV|)-V-Nzpa0bI!rCVp8$2DKNiLJ}N=hr{QM@lsG5+Xk)HvzX>Gk_h_MVhcQbNhO'
            'O3qZ=xA;IzFy474IbjPEjFS|vNl7K;l$_1vTqd<Dp;IBJ$fr0h&M+2RU%yUb%M+wyA17s(oVnz@CADjP-Rjk>_rftNZax$rF&2Dg'
            '*@-jM#wTm%I;m+J>shas_3Bu!hJ}(NZpFtDR_)a_oIyseDX|184VE;_T!y>`%NiD00YgJ@fCaC^u!c2nfT>~Sn^4fO{w)~Su#4L;'
            'p@~Ux2PQQ!CGNtMCN7D4a7h!>;yz4k;;MKcR^h4!3!1RSL$Ec`5Ragti3J4A>VPkgFy#6V35Mip`?<w1Bp<)p`7y%~+H|D`Fl0+$'
            'NGRLq4nxexEsI+KL(Jqn{J(`EW*0jCXkZA9`Di%10~iv)5TyqL7_vSLNovem7_wEIJZ~8CUHE)j7!qmJxYDW9PtyPYB^a`mAmmgZ'
            '3{l=@a~SfxK*&4a6AXD45c1kH!Vr?5+I{rG5QZR2BF_+HxeG!NfFM91DDqu!2%->#BJ1K1KDf(-apQJz`Y*LqYN}PY+%aET)$o+b'
            '_1rO8Zv>0x*(>KRTu_HoRK94QbxoB+KcfS!hV<)BK!F0``CORwv~e3}Yc=m07Qv#vRSBfuG%a7AF|Dz$%>rflVbFzQs3rp{F=CF7'
            'oi+<qS#j!C&8#}JPJoF;O!9&ea}24~v`5U6S!lUctWfcMIYN;xJRWs0>C=%Ng$B@l0N<5?S@r6c<EkPBI+-;8+?uz{hE@5>nw8Cw'
            'QBxLYi{{~qS1+RES~FI7x56(rd~Z%x0;1JcB{<x7{Ptfc>-CS=Ci{-qw7LIYa|SoJN=e`KJZ&zg$4qS3sjI#tv&o(#GvsSisJaHI'
            'b|GpHKwS$<V<4J|A?Wt_+^Y*WyTCFZ!^uovG(d{Z_Zbup#V~MN7vy!}T@2j1Fl}#q2Gl(P+8u+boiS`0ia}65hCaC%#AITqqW8rL'
            'q{Qp-nMD^4yc(Y=bhq!X#2fFI<8Adz@jLnMHuzw?aXk=kNnecLWABf*i~Hh@-QIY+wkLkKYs8zW7vk;C?sx;UD}KwlGk%}BBX;vc'
            '@w>zA@teJT{6246?B;Uud$Vl(Rx1;~yGnPL^zQqi{z!uqYGco<6EU@^I`+Re(c@5*RQDpmnsAix?Sl$Pp*(e+fSBJI=c+3OG_>7u'
            'ITe~h0!m&ipds#!YpTlyB;@^Zd3C{ngm)nBOI<P`euv|_>Y@Qnv$|?PldCQp(3BoxTpL|Dpy_)p?n7NVps7k;JD|P}$9x`%M{_jp'
            'Rb4+2N1_V|ggn(11o1``$U+EMT|*%CRu>USz139&Qg3w`Ax1BGQg3x3fz(@FNg(xBmlEQ=eV)|&L_BVFHG$OoWGn%7J%QBwR4fa1'
            'MS;|NB9_YOSn_9L`KYT3q~0IJl2X?dNWFg&%j}bQhWOF~t7BeFbv@|bINlAt&#Wv}{0jNgUt~C#k?zQZAt)|-va%ESmcOV%%Vt_`'
            'B@Dd_!|>4Y1YRPx&kP%U%GkHh*AI8Y`c)ZFG~_i~hH)>6o;)Ax_;nT8rkYa0qTL>_F}Z*aZYYc?iK6%{@|+dv2jnQ54RpaXPNf?h'
            'XZEmz&T!tTN~(ah7tLniQwR_yxdDag%(l?wqwAHULoGM-wn0xYXxIkUEqn8FRK;IL1B?S*D5kIK%*;p%)icX2hiY&DUo=$QVl<<Q'
            'O)0Tq->cI_FcsY6sCdbqph0}_8kB0)ibLVXCKN;e6uQ;0n>q^DQ@v7~y#bbLMmZQaOd8{OqT<jL?ri2MnkQKx-29+4DIihe)+L-r'
            's~Sdfva-y0v}2<Anr)#dYuH|M6#1e+CKN}*@&kvWn$8TFxDz7wlZ<!6JkMP|H+Jge*kAm#_}HR-3QH5{%Vabusjf-)!Bnvcv%DC{'
            'rfQmlo#^gri=uB;VeFrT-3)MdrUIWFcO84+OM5EtDY7nX)(jJp9G6LQsBuoM7Rh>)60MdB+>P>4!Yx#@c?vzN$_9xV708P&2o}TU'
            'FSsaB3bDfBR2;w3s?SrYP*t2}v!&Fs7L6-3As<avR=$ctOmT>#p<XDy)lkF6dxon<*%dYgjZw^5D|q5<WPhaAAHTnC<R3SSyn2)y'
            'L|zRduLhA<gUG8v<kcYZY7lufh`jm%L|$#e%bz6r>O1iI)KOSl$j5V!$od}ne&z_R?~%VPjoSJi#~?lyKY2_v7o>DZWgwNKlN25D'
            '8CcCiJ|_$?bTBet<is!x>oA;w;hZqR)WOVvnG*#l=upT&At%ORT!--tjOWAzOz1F?fr*@$gh?GHGccJGQ!u5&R0gJU;u2ia;Zg=J'
            '<-{~h>oA>x>72L<S9Q3WfvY)TgRO&|0Xrue(9ofgfksX&z=9478Cb}PC0Np7DFaJ6u?)*PEN5UjCstrZhm{Ph<ivHjuEX^VT+fLc'
            'a6^Y18Mu)XH{qrZH#2ZECvL$l9d2ddR!-c8+dACN!0nv419x<|lYu)qaTo6Da5n>YbK)M{)8SqQ?&ZXNxUa+g4BXF&2k=0L2N`&f'
            '6A$5`4i7W%Fee_tBOM-P5UPn)Sk+-QL&sF9G^Db0N|jGTK1)YbMjDJPol*^_VK@t>24)(}EEF^-q@j?7aSg`PFrI}84JOhsk%dVO'
            'CetvPg((fD(lC{UOB!5C!=)@tYcQRL=`4lKT}{K)EZ7>@X|S`<(4diqMiv${SV+S{7M3(vO2bkXmNi&T!*Z6+%U05`l7;IUTu;OG'
            'EZorGMjCEp;id*R({M8jw=}qwhFe*<t-<Xy+|I%s4eq4jP8RNJa5oKivv5y?duh0rh5H)ZPs3^&?q}hF1`pEkAPWyQc$kKVS$L$u'
            'qcl9q!m5^t=v&PVBKigqeS?U;K}6pmqHhq<H;CvPMD%T0MBf13ZVqqPi|!l1+oy-OPZIezfVa;F-fk2nm<z$J&fqqu@NEyc4WVra'
            'aWj81aEqW8(JevT%nu9PuI7Hc_!hw}LfpsUTaI&ig`zwty2A=&$(t!zt-z*(|L}uDc5(Vu{^(0ju`ukVr<hqd_w%zOQACFN2-%4f'
            'Csb&FS+^EOyP+25=No>vX{h_%rZCpis+sg5XNzJln`VJxGDpqJSI&+d|KNjDqjU)W({tyqoTZO5S*GpGQuIqz&iXQBu;MQ^0&mv0'
            '8n#oRpp@{7ChBW1O~;qjk>b$Lq%|)&;<fh^Pv%p8EKS<)(?R*)(aHOPxnCoh`+NHH4gL8I{h?3i%>9=B{5$>m$MBDifBuu6#?$!c'
            'Tl)F0^mGFMwCoSQu_rFtr`vN|@#*H1?~TVF0`K{Jv;E;Reb;UM$N{m=w}^YA2?iyTB|lsHrAzw{7ct>8^=iq)RI{5J74A#s!sD1a'
            '-dk8}t&`jz=&R~Buux-d-DL9Izn~_n@{cg%(c1FK<hlQe%dgsH^apDz^rg@JUgsLPG-KAiwN=(+%zc!O>f|Zw?)EhTTa%#{HhYJ?'
            '(>B!S;}0lv{7r0xq5XxX7g`+|+*aD~+`r*3wypNIl3WOI>Fhvicl$u8%3t^QOSYshJ+1lLlKJd0J?5q{J?Ka_2<o|r0!{5Efky8q'
            'o1tXGiJ(k#olL4){9jF}-N@Tu000'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    def __repr__(self) -> str:
        return 'uavcan.node.GetInfo.1.0()'


    _FIXED_PORT_ID_ = 430
    _MODEL_: _pydsdl_.ServiceType = _dsdl_.CompositeObject._restore_constant_(
        'ABzY8W}=N@0{`t@U5pghmF}vpZkhp)%Yb1F*e(NhdYqYNz!;B-oy;tbGwjVF#5m6EkGHArzB5(h?y62z^)M4D(&S;IvD8wK(krow'
        'c7^s~g(B@PTJ1_a^2j6FC!QjnR!IB8BaeGd-BZ;+^JBn_v)QyI`qWh2pL5T>-#z!cb#8gh_`CnAWa9tYuQyj~VXa;&hca;Oy8Cmx'
        'QkSK2)o(QY(2ZoLz2~wFmffoSbhRlvzv+zsvh#~hvHe0hkUwk5Fe*oM-^sLJxEuwoYSan_Qs&B@-N15=wCv@o?Ug*gCQCn%(FJe8'
        'FMXm4>9h;wWf_F7?@>{^KI7}(bc7}{zv}!F)hOFh6u6aEB*V_<o%a5ozsr?XRmm?XT}?IvS+yfs>wMWBEibq$vQ}>TK~#2Yor~?4'
        '%Awy1suCa6Ww~ibPN%(e((xPeWDAXOa={OzyXc)%>Moy}biIXoYo%71yc(cEf|JcwrS4X-{fn(S)l#n6ksX^M<V+{2jVI5%GnKaU'
        'RB5WDo{{E`9b(0S^dd4l8Mm|EHp(@>+G+pG$E|wZq5>?e*tgisrIA^@?Jro7Bk>-Z*^{+6MbNM#w3QV)Hm0aZD~#|))hf2Us$+YL'
        'vNmpAb+D~*R#k9l1uf5Wy~WbVg^2!i+(oCpiUniGH>6j?vLoLLTTQYXX2c|{sfAV9tYKK{pxTvs*lE9&jH8MhmFv=5j2vuRH28O?'
        'z4y=D=!fy&m+?;?CGBk4Z+6<&R)vJCjf#&(N8^EP_&7?b$v<k!z>fT&JJ#~$Dz>!NagMiNykysE*uo8ooFYBFh*q|P)xoD&!m?d&'
        '$<D7kMUlA{R&Zc8RY4t5XjQPe4cF_43|-hObg`@4@M|~{DECNNt~6~g9=jJ?m9T<2MscKsP2US;7b+jgy4%3PRO^RIzU+FQ3_8v('
        'R&}I(baT|G0z1xL$8=u$9J6kL;}j#EcJ5<WqG{5~M!Ms+x5E9s6(%^udPWl@#`QVh=L~aO)!YoIh3+!ey#FU?kwqM@7raO=%Ami|'
        'dwO~sZH#(VZJbunsHoSE+XpWt1yQ!rd3*-+2&ab3-*!Ifv=5YVz<V`2sPz`K-l||@at(V4JJ&hf&UElbs<d;NuRaq6=cmqJIe(p`'
        'cfB~h^Ea)EboNt{&z&DRRj1r?UjEWKc+ol3Uf7Arf-T)UQ8=%BiHd(Yi^xV0O2T_68@5N_=E)KPi*sFw6G;q+a|ljEaolJNZDPgE'
        'DUE!Jz;6bA<X8Q=wTLAJh~QPL=F1Rq99dQ0tIEK$+$faw1?#FCIq_tHlVjCM>MC`dqt5HG-JE02n<<#yPOskV0ocpuu}o~Rw<%KF'
        'yA@Dz3hdBm+N`vas_GOWv4BW)-Vqvh(i!Zrck$m@OeHi0Q=zlWlGLvWga6Kv%w7|DzQ2p4c1;xc`EFIX7-6}G<zALAupDLiB1@Cy'
        'ODy-X+|Tj=%a>UmWO<0?7|T~!9%gxj<x!TevV4u@>ntsnZ?HVZ@;J*AEZ=1L7Rzt3EV3MD`8LaMvz%Z#$+E=qB+Dt5+&SVj%Xe6w'
        'Vfil0vn=0ZInDBYmgiW0hvf$>KV<n`mfvGJ!*Y)0JWGe=3d?nt*IC|Vd7I^3miJjcWcgT0C}?~!mRuB*i|OQIF1eUbE}Z0ICAnBn'
        'F0LmRH<OFo$;I8|;(l`RFu8cl7cGYkhd3C7hYSfDCSt?f1{>M{HZ;bD!Pw9Tu(6A=k!Nh=7#jv-Bg@#(85<g7Bg5D*85<^J!(?oj'
        'j17~qVKO#M#)iq*Fc}*rW5Z-@n2ZgRv0*YcOvZ-E*f1FzCS${7Y?zD<ld)kkHcZBb$=EO%8zy7JWNes>4U@59GB!-chRN7485<^J'
        '!(?ojj17~qVKO#M#)iq*Fc}*rW5Z-@n2ZgRv0*YcOvZ-E*f1FzCS${7Y?zD<ld)kkHcZBb$=EO%8zy7JWNerTHp~PYW`Yef!G@V&'
        '!%VPYCfG0&Y?ui)%mf=|f(<jlhM8c)Ot4`l*f0}pm<cva!p1waR2!mUh=w5=6bZqlt(hzUyF~kNdxchpKbigP{OrZ<0x?-zx{YRC'
        'A{oS0E0MmK1kze{!m9YVK-{p(yof7FB#p>GnRjkOJNsAT7f3$`SMXPn6!+*ytMI{Op}!CfB%A*SEt8>^q?&J_#k9(OBE{mha@7xz'
        '2}f3<Qd)4zv2oo^Yx0_9M==|Y+=dJ%EV)vZ%?Qh}5;Z5|6?sgSCr~e{x$2A{!@*i3TG_YiwV1Ta*mysefgd6%U+7a#{;cITo1{0b'
        '%x&(m$*SEXu7%y<M|Iz>$zUSR*8MxFK&cx)OcWbQ+QfSbu7@<LUZ*BCn@Cw=>!Hf=(;!yE_Ex_`H$1;L4Lw=#TV8EKY2VYR#7d>D'
        '$k$9S`5NnXZ8b#3wCs|8v}uDQ^?zp5PC&L21vpN_)i9C`tN7XZ%i~s(-11tD3N{>vrelXr$$FYmIr1@PlPfk2{0TMS7l<@lNXMuI'
        'q<l4OYrqYoevVB_{LET(iAXh&tHw1acCEGo+UOZc8kcHX8oAu<b7j^juA$#r?IT+-`yjAak^O#5+goZwWtMIYZqrGHVdnXp@m?Zh'
        'IFhPvwAw*;xhcsz-ro0#Y|6;peBVVce?eI{lD60lub~@W`x=C8&<*PYgl*RVVcRp{h6@93csILYo!#*00AbVF4ew(&{K5cX%d#6D'
        'V>f(Yzzy#mAZ!M^;S9UsSJ@38W;c9@-S7c+!!NNL9%VPYXMnKf*bVFKhTmp4Tx2)=7Q5jS?1qoA8@AXDzs7F(D7)dq?1snK4IgAT'
        'e1P5Xz5zEp%5HcsyWx=m!j@+@Y_J>F*$rnBx3t!EOS@a1`?Ho*D4+i|Pvq+6<b{u{;!iGoG#*br)~VCelNCf)-KY7Lwne=v;n<FM'
        'FzfCY5@%Wk^~JhhiMKdZK^6|!80>0#UzT3Y4|p<{Uf2q_m`LrDRP2gdM>G(GZNzlFuBH|>`+9hvrbIP+pnBcf$U(}*y1VFB@UOam'
        'wKPJ{@pervxL)i>t4f>HwV;Mk>_vIn^d!!6J=2xi_*FBjtF~)wYZ>Q(8rA(=T?Lr~Cm=Pa*^Rhy{gcts@34c~hd#4$Cc@&jns%1{'
        '4U=s;*DU=zJ`tze`;zV5cz)e<a{3FQ(f*$D4x3I&O?4}z9i$DrMZI&^p-;$^+f88k@)v49_w-hiSjKr5u4&uMVi}=rn91UMB1=ff'
        'tH1S>T%^xLju6u~!}UEAyV5PHI6vM=X1)#S#BM_4UiGYy5|d5Si9Lki(Y|u=?p~fXx6C76pc%mAI(SaqHnn&$r9OQ%;gf_4ePw>}'
        '63s&gR9XX{?@ejb6Xg~AX+Ar+sSfz`0MGSLT$Xs5=E<?d(g{U-s{G;*&AErS)Cp50KIW;*6|c~|ezebC_;ieY)H9VQj*!oIZCiaY'
        ')lv3)&s>Lim3)+y+Lp9_<7<~FUMCNDOqFA8r$5zx{JGR8-XQOLBB`^dAIM5?KDRo=aq{+WePz#J4hvJC;FZO5t6RKDtBzvQPVTeu'
        '=U#{S7OisLe&Tjwjv}v;p1U4mJY9LIzCD3u7JK`5a>wcw-xd?R%6novV6F*X5$>2yVp5cNwW-EIQH_LCJ6@|eDW-T``&1UeoKw6G'
        '-f{iJDRG+D+WjMD0?VFCM$Nm=SC@WGQa!{w;ta3zpW0rS`wVk~r_-}v%YJ+HTPxL3yerN!|LBgWDH>DnZ(e_Y?fo|Dw@`my_4ia-'
        'w|GxXGv9e8J7Eda%#)O^{g&#tQ-5#v_htX6>KjwBrl_ZQUz}quw)yxvgC$SX82hl_cKtoq-*5e+YxA+yJF?!1+pM(tj`)DN;4|A!'
        'oTD<nx3RDLN7~lotap_4j<Mbm7F&+A6(1&CwRfyx4>EJjh&9M)u%_X|btq`Cu3?gEU}{JXFyVC=(=g`^ur$nk6N(z<zXekoR&g7q'
        'H8CUZz>Fs5#9f%v#3gYLE@@(3+=qEhToDh%W4NNhiY6TK5FAZ3#Up5HVg(7adcjvf8gl)QiG~zt`MJY1q>ygy{3+8AT6ATGG-O9;'
        'NNn5ZPD8A(nih9}hFJam@c)*ESY7J)CqqN1%_rjC9nz45hNy8cq#>Krkp2;~k%sJ)CeNFOd>uWXmWCuFYD$f%_n)Nx|4TGvCrQZJ'
        '0UDyb&Gt0pd6AH}zabj(EF|Q$XQUxyKehVkr6Ei~)<l6R$a<HAAOS&wKvd-G@DOAnNJTc~A^hUbh!0#ihv)xN%Vg$S4cnUxq+N^O'
        'GI_o?DI3jb)tbG0{=x<Ia*EQItXa=ePw3C&g;rAr4L71df%yGg{OD=pHfHN}|0*WIq=8+HWDr_*AkSI$<j<`lJqqHW3#Cw9MwDXQ'
        'nwosyD%NDxZP<0I<}SJs-YnrQKN`0tQQDz1Zk6dUMGZ4l{XmXWqzku4y_gK>l^ul!P<(sf$;hht4cqlpk|MpCwEo;)wymaJ{lZ?9'
        ';rN6lON%AzSk-To&~mK>J3crQl$wFRB&!k0TB{lz8+iSe*E5;TU$M;$ykgUq_UMD};FeybTVMBm+S03CB`lq)8hB+k)APy<_1c!I'
        'ZXl{%irPa^H`3CSh#Dyc-JQPo>e9_Fu`Hx?(in&a$k6+JCWRv@4cyfwd0l#!61Of*+n2rr>b?OQP07^Wls1i|B&d*5pL|MUjFhVA'
        '1F-@b@p}5sqDu!}P2VYWm+wc?h4<lfS^Y}7C*NHLA4(Ul2h%0#%jrJ$fpodJKV8`EOP6aerF*+(x|n(~UG9vg3z!$uUCzDfe&(Lk'
        '&5xvehr83Ay+XR5w<~pX`E=hbm+opA>E2bgJEeE`hXx}JGB_H0wob&{w!?97-$YMCQ8L}r0~^9o;@t-okV4PY83Iy%Z~9c7BcP^@'
        'rs-5@3K^*XGyyenUz$^$C?F#rNYkrR1!TN~X<h1M0qHxI=2fQ)sGHUK0_t3K!hpK;DD&FnlmT_$YiS+oqycqR|5*d7>sYGi@w7E3'
        '(puG-193b#bwJEhojVY3B!Mi%fYsRp8s6&k0S#|;{(y$JI)RX~mjVrMbqaxow>pPF!&{w1NZ0lS8s4YVcB}IUG`!EG7EosrXn3DZ'
        'ZK2L3(D0s4t@3_q`E#j#)cFJ&-XElvQfCxscz-vw+4s^On(2?+7js<?x-X4)L+`UF%hjMt{`AKN2Q$(+v^WICLr+$5qreVURcP5l'
        '%d5trcX1e=I;+<k+h@fEK4t9Nr<;enVg8zoC>rvrBjdQ2zMA|1^8^hQ*`|t8!J^$7urRrT4sIllDM_OEZ1S8{8ARkL!zQ}m1-IG_'
        'j<b5yL1(z^)+A-X+^bd?1r!2=x4ekLbQW9a^3nCmiIJ8Ud)ufd7&I;e^H%(2Iicb&lLn@NE)>&Oa~BpQh3Z+AmP<J}fG=q(E-}I+'
        'V<;sS9QX}7GNpohToo_b6Euhyev|In_0mYZu!+qu*o9s#uBL&;^;NA@W^aI{>QN5Hjc-kIJW*+64p%nI6wTA0AYS|o9_O@caU>@X'
        'mIa?yOw?bCEi`2v%L^w^FA8Krb2RNBaw)3m+=zuMAyU6z@ot#s`A^PIo;@@9)9;tQGU>p8r49^ae>5o#U5n0Ks$|nvWi^taDw>0x'
        '=yY<6qHk4Vte=b>Mz}gtflsct2_E=(n+kkN(1pcX@r{0sD`Ytwac;ey*m{C)+AS5hn><Ggw{Vy(Q|MVuHp$dDfc)erT`4a9f`<mB'
        '5G!m>)eWkx#xkXfhl(49Ej29bNxNbQ1qfML{UQl5#U@U~<3j1Jni?10(_GccuCXa-jAG7O(GxEt2P3t9|IIBUf4^Pi)ua3{@@g1)'
        'HH^F(MqUjguZEFV!^o>)<kcTR<kdF1{6V6xzJ{((9fh@ndOY`ttZz{7XO7VN2KC#~sI70X4dO%b-LHt|f{YFs12TDflcGbxfX6u~'
        '<b?^Q4yFNSUW~z*4r2z4<%I>74weB{UKF9IL(za@UQEH14pRn9<;65i>o9G=bY9HBj1Dsf%;d!!%;_*^z+7Hjf=fDFGT>5P%)`76'
        '^9Ic4#TB@s!xaOr<b?x{4vqm%UNoVpL(_m}UaY{14l4$%<i#4S>9A(NT3)Qfx(@3GtmnlwxTeE31Fq%8b-1p>bpx*F#SOTj!wmy&'
        '<i$<6sl!bJZsx@;xTV7_18(KTZMdz&Z3AxS#T~e#!yN<e<i%aMtHWIb?&ifkxTnKC1McO;eYmf~eFN_2#RGVt!vg~z<i$gHsKY}8'
        '9_Ga(c%;K41F4#L43BkqY|v|}OcpXZdP`NvLLo=5sLU*wIeJSqmW8n#SQ=PauyRn;pqPbX4yH7i%ED9*rZt$(!gLO1G?>Z4Ob+HW'
        'n9IUk4lZeMDGQf!Ft5RU7UpvlHg_cpS90KJ;AFwcK~sZf7MeL&(O@MDD>+!xU@Z%4Iat?VJqznOdS7-e3)gaRU4!dcxSoR>8r;aj'
        'jU3$6;AR$X=HQkFx3X|62e&o2orT*uxTC?HEZoV#T@CJL;cgD@X>czK_i}JwgZo){oQ3;2c%Z?9EIi1;Lk%8g;b9IQY49iuk8<!>'
        '>x<}noF7K?4I}!75q-mmzF|b)Frsf5(Kn3f+p&ngA-&z6-fkA%H>9^uPj8<j@^46QpAWs=DoQXPlUtq1ZC>%)9&#H~+nC}Se=u^3'
        'q!!sNQC#DXi`+iW|LO8uB)3R$zlz^-oXZi4@}TGrJCbF8p=`GzhhF^09~^QH&%eqaed$RShrRS9vx?_`G&`O|WT=mjoj!e9g$7s+'
        'du5^<YGHl4<#(G#y5DVzV?FJ<MIR=%DfTk7iWHMMVSRFWcJkDF@132Xm+;>||Iy`H`Z$vve<E83R!uGjGFGq}tTrQmF|eDCTcx0s'
        '_=_g$YcHW2$l7>m<cHE;mK^cg`-vy(DL<B`zD2zB_w=^@<0bmu+0t+6=LY@!BmMj{{rnUCXgdDfq^p~Bm8G8_Wbx;BboJkKbpe0U'
        '4;njT&MWKmv9%}vzHjd<{$a}gl<vmQPdd{V@rJARdn~+bb?+vL2X1rXDZD$?n^=7UdEoY7^sUO<#6-=FdHZiK{U;6-mHrVvc(gHn'
        '|LvuHdXoOJ^Da)(8#4^tU;2+E2hNxH=-$RG8y+lO&L(*Z^yu#H4F=orK+QJJZ2C=f1j=tyc*MwvK@sC2h617B8v#~(S6Qw^IGJ@I'
        'Gul2_uJPyJgR&#(+e;h1e`Gy-l#R7*lnqYpTZGwML~CY7$(qTIVHle=?ge^iZSs(3`2CxFq`v!Y`kpWU6)^EG{y!RQ{J!G{__PqD'
        '-?s1h2>VjmK;wQ+KNb49VkBmUf7O(szr^%MT9wlO0%L|O%-v!D00'
    )
    assert isinstance(_MODEL_, _pydsdl_.ServiceType)
